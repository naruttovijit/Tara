@page "/Data/Project"

@implements IDisposable;

@using ModelM2s;
@using ModelM4s;
@using Data;
@using Radzen;
@using Radzen.Blazor;
@using System.Globalization;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@inject ProjectData pj;
@inject NavigationManager NavManager
@inject BlazorSpinner.SpinnerService spin

@attribute [Authorize(Roles = "1,2,3")]

<br />
<div class="row">
    <div class="col"><h3>Queue List</h3></div>
    <div class="col">
        <button type="submit" class="btn btn-primary" style="float:right" @onclick="()=>GoCreate()">Create Project</button>
    </div>
</div>
<br />

<div class="card border-0">
    <div class="card-body border-0">
        <div class="row">
            @if (project is null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" RowRender="@RowRender" ExpandMode="DataGridExpandMode.Single"
                            Data="@project" TItem="ProjectHd" RowExpand="RowExpand" GridLines="DataGridGridLines.Horizontal" >
                    <Template Context="sub">
                        <RadzenDataGrid AllowPaging="true" AllowSorting="true" Data="@sub.ProjectSubProjectTls" TItem="ProjectSubProjectTl">
                            <Columns>
                                <RadzenDataGridColumn TItem="ProjectSubProjectTl" Property="ProjectSubRunNo" Title="No" Width="150px">
                                    <Template Context="subp">
                                        <a href="@($"/Data/ProjectSubDetail/{subp.Id}")">@subp.ProjectSubRunNo</a>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ProjectSubProjectTl" Property="ProjectSubName" Title="Project Sub Name" Width="270px" />
                                <RadzenDataGridColumn TItem="ProjectSubProjectTl" Property="Budget" Title="Budget" Width="180px" TextAlign="TextAlign.Right">
                                    <Template Context="budg">
                                        @String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", budg.Budget)
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ProjectSubProjectTl" Property="Id" Title="Capability" Width="400px">
                                    <Template Context="cap">
                                        <p style="white-space:pre-wrap">@Getcap(cap.Id)</p>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ProjectSubProjectTl" Property="ProjectSubStatus" Title="Status" Width="150px" />
                                <RadzenDataGridColumn TItem="ProjectSubProjectTl" Property="CreateDated" Title="Create Date" FormatString="{0:dd/MM/yyyy}" TextAlign="TextAlign.Center" Width="170px" />
                                @if (userrole == 1)
                                {
                                    <RadzenDataGridColumn TItem="ProjectSubProjectTl" Property="Id" Width="70px">
                                        <Template Context="sube">
                                            <a><RadzenButton Click=@(args => SubEdit(sube.Id)) Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" /></a>
                                        </Template>
                                    </RadzenDataGridColumn>
                                }
                            </Columns>
                        </RadzenDataGrid>
                    </Template>
                    <Columns>
                        <RadzenDataGridColumn TItem="ProjectHd" Property="ProjectHdrunNo" Title="No" Width="130px">
                            <Template Context="hd">
                                <a href="@($"/Data/ProjectDetail/{hd.Id}")">@hd.ProjectHdrunNo</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ProjectHd" Property="ProjectName" Title="Project Main Name" Width="270px" />
                        <RadzenDataGridColumn TItem="ProjectHd" Property="CustomerInfo" Title="Customer" Width="270px">
                            <Template Context="cust">
                                @if (!string.IsNullOrEmpty(cust.CustomerInfo))
                                {
                                    customerinfo = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CustomCustomer>>(cust.CustomerInfo);
                                    <p>
                                        @customerinfo[0].Name
                                    </p>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ProjectHd" Property="Budget" Title="Budget" Width="180px" TextAlign="TextAlign.Right">
                            <Template Context="budg">
                                @String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", budg.Budget)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ProjectHd" Property="ProjectHdstatus" Title="Status" Width="200px" />
                        <RadzenDataGridColumn TItem="ProjectHd" Property="CreateDated" Title="Create Date" FormatString="{0:dd/MM/yyyy}" TextAlign="TextAlign.Center" Width="170px" />
                        @if (userrole == 1)
                        {
                            <RadzenDataGridColumn TItem="ProjectHd" Property="ProjectHdrunNo" Width="50px" >
                                <Template Context="hd">
                                    <a><RadzenButton Click=@(args => AddSub(hd.Id)) Icon="add" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" /></a>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ProjectHd" Property="ProjectHdrunNo" Width="50px" >
                                <Template Context="hd">
                                    <a><RadzenButton Click=@(args => MainEdit(hd.Id)) Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" /></a>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ProjectHd" Property="ProjectHdrunNo" Width="50px">
                                <Template Context="hd">
                                    <a><RadzenButton Click=@(args => MainDelete(hd.Id)) Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" /></a>
                                </Template>
                            </RadzenDataGridColumn>
                        }
                    </Columns>
                </RadzenDataGrid>
            }
        </div>
    </div>
</div>


@code {
    private List<ProjectHd> project;
    private RadzenDataGrid<ProjectHd>? grid;
    private List<CustomCustomer>? customerinfo;
    private List<ProjectRatypeTl> listra;
    private List<MasterCapabilityCat> capability;
    private List<MasterCapabilityCatSub> subcapability;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }

    int userrole;
    string usermemberno;
    int userid;

    protected override async Task OnInitializedAsync()
    {
        spin.Show();
        await base.OnInitializedAsync();
        await GetDataAuthen();
        await Initial();
        StateHasChanged();
        spin.Hide();
    }

    async Task Initial()
    {
        project = await pj.GetProjectHD();
        project = project.Where(w => w.Active == "Y").ToList();
        project = project.OrderByDescending(n => n.ProjectHdrunNo).ToList();
        listra = await pj.GetAllProjectRAType();
        capability = await pj.GetAllCapability();
    }

    async Task GetDataAuthen()
    {
        usermemberno = string.Empty;

        AuthenticationState authenticationState;
        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;
        var claim = this.AuthenticationStateUser.Claims.ToList();
        userrole = int.Parse(claim[1].Value);
        usermemberno = claim[2].Value;
        userid = int.Parse(claim[3].Value);
    }

    void RowRender(RowRenderEventArgs<ProjectHd> args)
    {
        args.Expandable = true;
        //args.Attributes.Add("style", "background-color: var(--rz-success-light)");
        //args.Attributes.Add("style", "background-color: var(--rz-success-light)");
    }

    void RowExpand(ProjectHd hd)
    {
        if (hd.ProjectSubProjectTls == null)
        {

            hd.ProjectSubProjectTls = hd.ProjectSubProjectTls.Where(o => o.ProjectHdid == hd.Id).ToList();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            if (project is not null)
            {
                //await grid.ExpandRow(project.FirstOrDefault());
            }
        }
    }

    private void GoCreate()
    {
        NavManager.NavigateTo("/Data/ProjectCreate",true);
    }

    private void MainEdit(int id)
    {
        NavManager.NavigateTo("/Data/ProjectEdit/" + id.ToString(), true);
    }

    private void AddSub(int id)
    {
        NavManager.NavigateTo("/Data/AddProjectSub/" + id.ToString(), true);
    }

    private void SubEdit(int id)
    {
        NavManager.NavigateTo("/Data/ProjectSubEdit/" + id.ToString(), true);
    }

    async Task MainDelete(int id)
    {
        var pro = project.Where(w => w.Id == id).FirstOrDefault();
        pro.Active = "N";

        foreach (var sub in pro.ProjectSubProjectTls)
        {
            sub.Active = "N";
            //foreach (var mem in sub.ProjectSubMemberAsgmts)
            //{
            //    mem.Active = "N";
            //    foreach (var awa in mem.MemberAsgmtawardedHistories)
            //    {
            //        awa.Active = "N";
            //    }
            //}
        }

        var update = await pj.SaveProjectHD(pro);

        await Initial();
        StateHasChanged();
    }

    private string Getcap(int id)
    {
        string cap = string.Empty;

        if (id > 0)
        {
            var list = listra.Where(w => w.ProjectSubProjectTlid == id).FirstOrDefault();
            subcapability = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(list.MemberCapability);
            foreach (var sub in subcapability)
            {
                var cat = capability.Where(w => w.Id == sub.CategoryCatId).FirstOrDefault();
                cap = cap + "\u2022 " + cat.CategoryCat + " - " + sub.CategoryCatSub + Environment.NewLine;
            }
        }

        return cap;
    }

    public void Dispose()
    {
        if (project is not null) project.Clear();
        if (customerinfo is not null) customerinfo.Clear();
        if (listra is not null) listra.Clear();
        if (capability is not null) capability.Clear();
        if (subcapability is not null) subcapability.Clear();
        Console.WriteLine("Disconnected");
    }

}
