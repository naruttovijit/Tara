@page "/Data/MemberAssign/{id:int}"

@using Data;
@using ModelM2s;
@using ModelM4s;

@inject ProjectData pj;

<h3>Member Assignment</h3>
<br />
<br />
<p font-size:25px> <b>Project Sub Running Number :</b> @projectsub.ProjectSubRunNo  </p>
<p font-size:25px> <b>Project Sub Name :</b> @projectsub.ProjectSubName  </p>
<p font-size:25px> <b>Description :</b> @projectsub.Description  </p>
<p font-size:25px> <b>Remarked :</b> @projectsub.Remark </p>

@if (string.IsNullOrEmpty(projectsub.Budget.ToString()))
{
    <p font-size:25px> <b>Budget :</b> 0 THB</p>
}
else
{
    <p font-size:25px> <b>Budget :</b> @projectsub.Budget THB</p>
}

<p font-size:25px> <b>Status :</b> @projectsub.ProjectSubStatus</p>

@if (string.IsNullOrEmpty(projectsub.PlanStartDate.ToString()))
{
    <p font-size:25px> <b>Started Date :</b> Not Planed</p>
}
else
{
    <p font-size:25px> <b>Started Date :</b> @projectsub.PlanStartDate</p>
}

@if (string.IsNullOrEmpty(projectsub.PlanFinishDate.ToString()))
{
    <p font-size:25px> <b>Finished Date :</b> Not Planed</p>
}
else
{
    <p font-size:25px> <b>Finished Date :</b> @projectsub.PlanFinishDate</p>
}

<br />
<br />
<h4><b>Project Category</b></h4>
@if (subcapability is null)
{
    <p><em>No Capability</em></p>
}
else
{
    <table class="table table-striped" style="background-color:white; border:solid">
        <thead>
            <tr>
                <th>Capability Name</th>
                <th>Capability Sub Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cat in subcapability)
            {
                var cate = capability.Where(w => w.Id == cat.CategoryCatId).FirstOrDefault();
                <tr>
                    <td>@cate.CategoryCat</td>
                    <td>@cat.CategoryCatSub</td>
                </tr>
            }
        </tbody>
    </table>
}

<br />
<br />
<h4>Member Assignment</h4>
<p style="background-color:white; border:solid">
    <table style="width:100%">
        <tr>
            <th>No.</th>
            <th>Company Name TH</th>
            <th>Telephone</th>
            <th>Comfirm Date</th>
            <th>Comfirm</th>
            <th>Awarded</th>
            <th>Delete</th>
        </tr>
        @if (projectsub.ProjectSubMemberAsgmts is not null)
        {
            int no = 0;
            foreach (var list in projectsub.ProjectSubMemberAsgmts)
            {
                no++;
                var item = member.Where(w => w.Id == list.MemberId).FirstOrDefault();
                <tr>
                    <td>@no</td>
                    <td>@item.CompanyNameTh</td>
                    <td>@item.Telephone</td>
                    <td>@list.DateConfirm</td>
                    @if (list.DateConfirm is not null)
                    {
                        <td></td>
                        @if (awarded)
                        {
                            <td>@list.Awarded</td>
                        }
                        else
                        {
                            if (list.Id > 0)
                            {
                                <td><a href="/Data/ProjectMemberAssignAwarded/@list.Id">Link</a></td>
                            }
                        }
                        <td></td>
                    }
                    else
                    {
                        <td><input type="checkbox" @onchange="EventArgs => { CheckboxClicked(list,EventArgs.Value);}" /></td>
                        <td></td>
                        <td><button @onclick="() => projectsub.ProjectSubMemberAsgmts.Remove(list)">X</button></td>
                    }
                </tr>
            }
        }
    </table>
</p>

@if (!awarded)
{
    <EditForm Model="memberassign">
        <InputSelect id="AssignMember" @bind-Value="memberassign.MemberId">
            <option value="0">------------Select Member------------</option>
            @if (member is not null)
            {
                foreach (var list in member)
                {
                    <option value="@list.Id">@list.CompanyNameTh</option>
                }
            }
        </InputSelect> &nbsp;&nbsp;
        <button @onclick="()=>AddMember(memberassign.MemberId)">Add Member</button>
    </EditForm>
    <br />
    <button @onclick="()=>UpdateMemberAssign()">Update</button>
}
<br />
<br />



@code {
    [Parameter]
    public int id { get; set; }

    public List<string> CheckBox { get; set; } = new List<string>();
    public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
    public ProjectSubMemberAsgmt memberassign { get; set; } = new ProjectSubMemberAsgmt();

    private List<MasterCapabilityCat> capability;
    private List<MasterCapabilityCatSub> subcapability;
    private List<MemberContactPerson> contact;
    private List<MemberMaster> member;
    private List<ProjectRatypeTl> projectra;
    private List<ProjectSubMemberAsgmt> assign;

    string JsonCat;
    int memberid;
    bool awarded = false;

    protected override async Task OnInitializedAsync()
    {
        await Initial();
    }

    private async Task Initial()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        projectra = await pj.GetAllProjectRATypeBySubProjectID(projectsub.Id);
        capability = await pj.GetAllCapability();
        member = await pj.GetAllMember();

        subcapability = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(projectra[0].MemberCapability);
        foreach (var list in projectsub.ProjectSubMemberAsgmts)
        {
            if (list.MemberAsgmtawardedHistories.Count > 0)
            {
                awarded = true;
                break;
            }
        }
        StateHasChanged();
    }

    void AddMember(int id) //Add contact to Project HD
    {
        memberassign.ProjectSubProjectTlid = id;
        memberassign.Active = "Y";
        memberassign.EditorId = 1;
        projectsub.ProjectSubMemberAsgmts.Add(memberassign);
        memberassign = new ProjectSubMemberAsgmt();
    }

    async void UpdateMemberAssign() //Update member assignment in table
    {
        projectsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = projectsub.Id, Remark = "Update Member Assignments", EditorId = 1 });
        projectsub.ProjectSubStatus = "Member Assignment";
        var result = await pj.SaveSubProject(projectsub);
        
        await Initial();
    }

    void CheckboxClicked(ProjectSubMemberAsgmt assignmember, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            assignmember.DateConfirm = DateTime.Now;
        }
    }


}
