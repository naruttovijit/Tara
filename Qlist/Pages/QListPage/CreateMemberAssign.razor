@page "/Data/MemberAssign/{id:int}"

@implements IDisposable;

@using Data;
@using ModelM2s;
@using ModelM4s;
@using System.Linq;

@inject ProjectData pj;
@inject NavigationManager NavManager

<h3>Member Assignment</h3>
<div class="container">
    <div class="row">
        <div class="col-2"><p>Running Number :</p></div>
        <div class="col"><p>@projectsub.ProjectSubRunNo </p></div>
    </div>

    <div class="row">
        <div class="col-2"><p>Project Sub Name :</p></div>
        <div class="col"><p>@projectsub.ProjectSubName </p></div>
    </div>

    <div class="row">
        <div class="col-2"><p>Description :</p></div>
        <div class="col"><p>@projectsub.Description </p></div>
    </div>

    <div class="row">
        <div class="col-2"><p>Remarked :</p></div>
        <div class="col"><p>@projectsub.Remark </p></div>
    </div>

    <div class="row">
        <div class="col-2"><p>Budget :</p></div>
        @if (string.IsNullOrEmpty(projectsub.Budget.ToString()))
        {
            <div class="col"><p>0 THB</p></div>
        }
        else
        {
            <div class="col"><p>@projectsub.Budget THB</p></div>
        }
    </div>

    <div class="row">
        <div class="col-2"><p>Status :</p></div>
        <div class="col"><p>@projectsub.ProjectSubStatus </p></div>
    </div>

    <div class="row">
        <div class="col-2"><p>Started Date :</p></div>
        @if (string.IsNullOrEmpty(projectsub.PlanStartDate.ToString()))
        {
            <div class="col"><p>Not Planed</p></div>
        }
        else
        {
            <div class="col"><p>@projectsub.PlanStartDate</p></div>
        }
    </div>

    <div class="row">
        <div class="col-2"><p>Finished Date :</p></div>
        @if (string.IsNullOrEmpty(projectsub.PlanFinishDate.ToString()))
        {
            <div class="col"><p>Not Planed</p></div>
        }
        else
        {
            <div class="col"><p>@projectsub.PlanFinishDate</p></div>
        }
    </div>
</div>
<br />

<div class="container">
    <h4>Project Category</h4>
    @if (subcapability is null)
    {
        <p><em>No Capability</em></p>
    }
    else
    {
        <table class="table table-striped" style="background-color:white; border:solid">
            <thead>
                <tr>
                    <th>Capability Name</th>
                    <th>Capability Sub Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cat in subcapability)
                {
                    var cate = capability.Where(w => w.Id == cat.CategoryCatId).FirstOrDefault();
                    <tr>
                        <td>@cate.CategoryCat</td>
                        <td>@cat.CategoryCatSub</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<br />

<div class="container">
    <h4>Member Assignment</h4>
    <div class="row" style="background-color:white; border:solid">
        <table style="width:100%">
        <tr>
            <th style="width:10%">No.</th>
            <th style="width:30%">Company Name TH</th>
            <th style="width:20%">Telephone</th>
            <th style="width:10%">Comfirm Date</th>
            <th class="text-center" style="width:10%">Comfirm</th>
            <th class="text-center" style="width:10%">Awarded</th>
            <th class="text-center" style="width:10%">Delete</th>
        </tr>
        @if (projectsub.ProjectSubMemberAsgmts is not null)
        {
            int no = 0;
            foreach (var list in projectsub.ProjectSubMemberAsgmts)
            {
                no++;
                var item = member.Where(w => w.Id == list.MemberId).FirstOrDefault();
                <tr>
                    <td>@no</td>
                    <td>@item.CompanyNameTh</td>
                    <td>@item.Telephone</td>
                    <td>@list.DateConfirm</td>
                    @if (list.DateConfirm is not null)
                    {
                        <td></td>
                        @if (awarded)
                        {
                            <td class="text-center">@list.Awarded</td>
                        }
                        else
                        {
                            if (list.Id > 0)
                            {
                                <td class="text-center"><a href="/Data/ProjectMemberAssignAwarded/@list.Id">Link</a></td>
                            }
                        }
                        <td></td>
                    }
                    else
                    {
                        <td class="text-center"><input type="checkbox" @onchange="EventArgs => { CheckboxClicked(list,EventArgs.Value);}" /></td>
                        <td></td>
                        <td class="text-center"><button @onclick="() => projectsub.ProjectSubMemberAsgmts.Remove(list)">X</button></td>
                    }
                </tr>
            }
        }
        else
        {
            if (count is not null)
            {

            }
        }
    </table>
    </div>
</div>
<br />

@if (!awarded)
{
    <div class="container">
        <EditForm Model="memberassign">
            <div class="row">
                <div class="col-4">
                    <p>
                        <InputSelect id="AssignMember" @bind-Value="idMember">
                            <option value="0">------------Select Member------------</option>
                            @if (member is not null)
                            {
                                foreach (var list in member)
                                {
                                    <option value="@list.Id">@list.CompanyNameTh</option>
                                }
                            }
                        </InputSelect>
                    </p>
                </div>
                <div class="col">
                    <button @onclick="()=>AddMember(idMember)">Add Member</button>
                </div>
            </div>
            <div class="row">
                <p>
                    <button style="width:10%" @onclick="()=>UpdateMemberAssign()">Update</button>
                </p>
            </div>
        </EditForm>
    </div>
}
<br />

<button type="submit" class="btn btn-primary" style="float:left;" @onclick="()=>GoBack()">Go Back</button>


@code {
    [Parameter]
    public int id { get; set; }

    public List<string> CheckBox { get; set; } = new List<string>();
    public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
    public ProjectSubMemberAsgmt memberassign { get; set; } = new ProjectSubMemberAsgmt();
    public ProjectRatypeTl projectra { get; set; } = new ProjectRatypeTl();

    private List<MasterCapabilityCat> capability;
    private List<MasterCapabilityCatSub> subcapability;
    private List<MemberContactPerson> contact;
    private List<MemberMaster> member;
    private List<ProjectSubMemberAsgmt> assign;
    private List<MemberAddress> membercap;
    private List<ProjectSubMemberAsgmt> allassign;
    private List<MemberAsgmtawardedHistory> allawarded;
    private List<CountAwarded> count;

    string JsonCat;
    int idMember;
    bool awarded = false;

    protected override async Task OnInitializedAsync()
    {
        await Initial();
    }

    private async Task Initial()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        projectra = await pj.GetProjectRATypeBySubProjectID(projectsub.Id);
        capability = await pj.GetAllCapability();
        member = await pj.GetAllMember();
        allassign = await pj.GetAllMemberAssignment();
        allawarded = await pj.GetAllMemberAwarded();

        subcapability = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(projectra.MemberCapability);
        if (projectsub.ProjectSubMemberAsgmts.Count > 0)
        {
            foreach (var list in projectsub.ProjectSubMemberAsgmts)
            {
                if (list.MemberAsgmtawardedHistories.Count > 0)
                {
                    awarded = true;
                    break;
                }
            }
        }
        else
        {
            AutoAssignment();
        }

        StateHasChanged();
    }

    private void AutoAssignment()
    {
        List<int> sub = new List<int>();
        List<int> awardid = new List<int>();
        foreach (var list in subcapability)
        {
            sub.Add(list.Id);
        }

        var result = member.Where(o => o.MemberCategories.Any(m => sub.Contains(m.CategorySubId.GetValueOrDefault())));
        List<MemberMaster> result2 = result.Where(w => (w.RegisterCapital / projectsub.Budget) <= 10).ToList();
        count = new List<CountAwarded>();
        foreach (var list in result2)
        {
            count.Add(new CountAwarded() {MemberId = list.Id, Count = 0});
        }

        var assign = allassign.Where(w => w.Awarded == "Y").ToList();
        foreach(var list in assign)
        {
            awardid.Add(list.MemberId);
        }
        var grouped = awardid.GroupBy(x => x).Select(y => new { item = y.Key, count = y.Count() });
        foreach (var list in grouped)
        {
            var c = count.Where(w => w.MemberId == list.item).FirstOrDefault();
            if (c is not null)
            {
                if (c.MemberId > 0)
                {
                    c.Count = list.count;
                }
            }
        }
        //var min = count.Select(w => w.Count).Where(c => c != null).Min();
        //var max = count.Select(w => w.Count).Where(c => c != null).Max();

        count = count.OrderBy(n => n.Count).ToList();

        foreach (var list in count)
        {
            AddMember(list.MemberId);
        }
    }

    void AddMember(int member) //Add contact to Project HD
    {
        memberassign.ProjectSubProjectTlid = id;
        memberassign.MemberId = member;
        memberassign.Active = "Y";
        memberassign.EditorId = 1;
        projectsub.ProjectSubMemberAsgmts.Add(memberassign);
        memberassign = new ProjectSubMemberAsgmt();
    }

    async void UpdateMemberAssign() //Update member assignment in table
    {
        projectsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = projectsub.Id, Remark = "Update Member Assignments", EditorId = 1 });
        projectsub.ProjectSubStatus = "Member Assignment";
        var result = await pj.SaveSubProject(projectsub);
        
        await Initial();
    }

    void CheckboxClicked(ProjectSubMemberAsgmt assignmember, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            assignmember.DateConfirm = DateTime.Now;
        }
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/Data/ProjectSubDetail/" + id.ToString());
    }

    public void Dispose()
    {
        Console.WriteLine("Disconnected");
    }
}
