@page "/Data/ProjectEdit/{id:int}"

@implements IDisposable;

@using ModelM2s;
@using ModelM4s;
@using Data;
@using System.IO;
@using Radzen;
@using Radzen.Blazor;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@inject IWebHostEnvironment env
@inject ProjectData pj;
@inject NavigationManager NavManager
@inject DialogService DialogService

@attribute [Authorize(Roles = "1,2")]

<br />
<h3>Edit Project</h3>
<EditForm Model="projecthd">
    <ConcurrentComponent ModuleName="ProjectEdit" ObjId="projecthd.Id" UserId="userid"></ConcurrentComponent>
    <div class="card">
        <div class="card-header">Project Main</div>
        <div class="card-body">
            <div class="row">
                <div class="col-2"><p><b>Main Project Name</b></p></div>
                <div class="col"><p><RadzenTextBox style="width: 100%" id="MainName" @bind-Value="projecthd.ProjectName" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Description</b></p></div>
                <div class="col"><p><RadzenTextArea Style="width:100%" @bind-Value=@projecthd.Description Cols="30" Rows="3" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Remark</b></p></div>
                <div class="col"><p><RadzenTextArea Style="width:100%" @bind-Value=@projecthd.Remark Cols="30" Rows="3" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Budget</b></p></div>
                <div class="col"><p><RadzenNumeric TValue="double?" Placeholder="0.0" Step="0.5" @bind-Value=@projecthd.Budget Class="w-100" /></p></div>
                <div class="col-1">THB</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Started Date</b></p></div>
                <div class="col-2">
                    <p>
                        <RadzenDatePicker @bind-Value=@projecthd.PlanStartDate DateFormat="dd/MM/yyyy" Class="w-100">
                            <FooterTemplate>
                                <RadzenButton Click=@OnTodayPlanStart Text="Today" Class="my-3 w-100" />
                            </FooterTemplate>
                        </RadzenDatePicker>
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Finished Date</b></p></div>
                <div class="col-2">
                    <p>
                        <RadzenDatePicker @bind-Value=@projecthd.PlanFinishDate DateFormat="dd/MM/yyyy" Class="w-100">
                            <FooterTemplate>
                                <RadzenButton Click=@OnTodayPlanFinish Text="Today" Class="my-3 w-100" />
                            </FooterTemplate>
                        </RadzenDatePicker>
                    </p>
                </div>
            </div>
        </div>
    </div>

    <br />

    <div class="card">
        <div class="card-header">Customer</div>
        <div class="card-body">
            <div class="row">
                    <div class="col-2"><p><b>Name</b></p></div>
                    <div class="col"><p><RadzenTextBox style="width: 100%" @bind-Value="custname" /></p></div>
                </div>
                <div class="row">
                    <div class="col-2"><p><b>Address</b></p></div>
                    <div class="col"><p><RadzenTextArea style="width: 100%" @bind-Value="custaddress" Cols="30" Rows="3" /></p></div>
                </div>
                <div class="row">
                    <div class="col-2"><p><b>Telephone</b></p></div>
                    <div class="col"><p><RadzenTextBox style="width: 100%" @bind-Value="custtelephone" /></p></div>
                </div>
                <div class="row">
                    <div class="col-2"><p><b>Email</b></p></div>
                    <div class="col"><p><RadzenTextBox style="width: 100%" @bind-Value="custemail" /></p></div>
                </div>
                <div class="row">
                    <div class="col-2"><p><b>Website</b></p></div>
                    <div class="col"><p><RadzenTextBox style="width: 100%" @bind-Value="custwebsite" /></p></div>
                </div>
                <div class="row">
                    <div class="col-2"><p><b>Facebook</b></p></div>
                    <div class="col"><p><RadzenTextBox style="width: 100%" @bind-Value="custfacebook" /></p></div>
                </div>
                <div class="row">
                    <div class="col-2"><p><b>Other</b></p></div>
                    <div class="col"><p><RadzenTextArea style="width: 100%" @bind-Value="custother" Cols="30" Rows="3" /></p></div>
                </div>
        </div>
    </div>

    <br />

    <div class="card">
        <div class="card-header">Contact List</div>
        <div class="card-body">
            @if (listcontact is not null)
            {
                foreach (var list in listcontact)
                {
                    <div class="card-body bg-info bg-opacity-10">
                        <div class="row">
                            <div class="col-2"><b>Name</b></div>
                            <div class="col">@list.Name</div>
                            <div class="col-1"><RadzenButton Click=@(args => listcontact.Remove(list)) Text="X" ButtonStyle="ButtonStyle.Danger" /></div>
                        </div>
                        <div class="row">
                            <div class="col-2"><b>Position</b></div>
                            <div class="col">@list.Position</div>
                        </div>
                        <div class="row">
                            <div class="col-2"><b>Address</b></div>
                            <div class="col"><a style="white-space: pre-wrap;">@list.Address</a></div>
                        </div>
                        <div class="row">
                            <div class="col-2"><b>Email</b></div>
                            <div class="col">@list.Email</div>
                        </div>
                        <div class="row">
                            <div class="col-2"><b>MobileNo</b></div>
                            <div class="col">@list.MobileNo</div>
                        </div>
                        <div class="row">
                            <div class="col-2"><b>Other</b></div>
                            <div class="col"><a style="white-space: pre-wrap;">@list.Other</a></div>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-2"><p><b>Name</b></p></div>
                <div class="col"><p><RadzenTextBox style="width: 100%" id="MainName" @bind-Value="contactname" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Position</b></p></div>
                <div class="col"><p><RadzenTextBox style="width: 100%" id="MainName" @bind-Value="contactpos" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Address</b></p></div>
                <div class="col"><p><RadzenTextArea style="width: 100%" @bind-Value="contactaddr" Cols="30" Rows="3" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Email</b></p></div>
                <div class="col"><p><RadzenTextBox style="width: 100%" id="MainName" @bind-Value="contactemail" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>MobileNo</b></p></div>
                <div class="col"><p><RadzenTextBox style="width: 100%" id="MainName" @bind-Value="contactmobile" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Other</b></p></div>
                <div class="col"><p><RadzenTextArea style="width: 100%" @bind-Value="contactother" Cols="30" Rows="3" /></p></div>
            </div>
            <div class="row-cols-sm-auto">
                <RadzenButton Click=@(args => SaveContact()) Icon="add" Text="Add Contact" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" />
            </div>
        </div>
    </div>
    <br />

    <div class="card border-0">
        <div class="row">
            <RadzenButton Click=@(args => UpdateProjectHD()) Icon="update" Text="Update" ButtonStyle="ButtonStyle.Success" />
        </div>
    </div>
</EditForm>
<br />




@code {
    [Parameter]
    public int id { get; set; }

    public ProjectHd projecthd { get; set; } = new ProjectHd();

    private List<CustomCustomer> customerinfo;
    private List<CustomContact> listcontact;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }

    int userrole;
    string usermemberno;
    int userid;

    int customerid;

    string contactname;
    string contactpos;
    string contactaddr;
    string contactemail;
    string contactmobile;
    string contactother;

    string custname;
    string custaddress;
    string custtelephone;
    string custemail;
    string custwebsite;
    string custfacebook;
    string custother;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetDataAuthen();
        projecthd = await pj.GetProjectHDbyID(id);
        customerinfo = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CustomCustomer>>(projecthd.CustomerInfo);
        custname = customerinfo[0].Name;
        custaddress = customerinfo[0].Address;
        custtelephone = customerinfo[0].Telephone;
        custemail = customerinfo[0].Email;
        custwebsite = customerinfo[0].WebSite;
        custfacebook = customerinfo[0].Facebook;
        custother = customerinfo[0].Other;
        listcontact = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CustomContact>>(projecthd.ContactInfo);
        StateHasChanged();
    }

    async Task GetDataAuthen()
    {
        usermemberno = string.Empty;

        AuthenticationState authenticationState;
        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;
        var claim = this.AuthenticationStateUser.Claims.ToList();
        userrole = int.Parse(claim[1].Value);
        usermemberno = claim[2].Value;
        userid = int.Parse(claim[3].Value);
    }

    async void SaveContact() //Add contact to Project HD
    {
        if (string.IsNullOrEmpty(contactname))
        {
            await ErrorMessage("Please fill in Contact Name!");
            return;
        }
        if (string.IsNullOrEmpty(contactemail))
        {
            await ErrorMessage("Please fill in Contact Email!");
            return;
        }
        if (string.IsNullOrEmpty(contactmobile))
        {
            await ErrorMessage("Please fill in Contact Mobile!");
            return;
        }
        if (!string.IsNullOrEmpty(contactaddr))
        {
            contactaddr = contactaddr.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        }
        if (!string.IsNullOrEmpty(contactother))
        {
            contactother = contactother.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        }

        listcontact.Add(new CustomContact()
                {
                    Name = contactname,
                    Position = contactpos,
                    Address = contactaddr,
                    Email = contactemail,
                    MobileNo = contactmobile,
                    Other = contactother
                });

        contactname = string.Empty;
        contactpos = string.Empty;
        contactaddr = string.Empty;
        contactemail = string.Empty;
        contactmobile = string.Empty;
        contactother = string.Empty;
    }

    async void UpdateProjectHD()
    {
        if (string.IsNullOrEmpty(projecthd.ProjectName))
        {
            await ErrorMessage("Please fill in Main Project Name!");
            return;
        }
        if (listcontact is null || listcontact.Count == 0)
        {
            await ErrorMessage("Please fill Contact!");
            return;
        }
        if (string.IsNullOrEmpty(custname))
        {
            await ErrorMessage("Please fill Customer Name!");
            return;
        }
        if (string.IsNullOrEmpty(custaddress))
        {
            await ErrorMessage("Please fill Customer Address!");
            return;
        }
        if (string.IsNullOrEmpty(custtelephone))
        {
            await ErrorMessage("Please fill Customer Telephone!");
            return;
        }
        if (string.IsNullOrEmpty(custemail))
        {
            await ErrorMessage("Please fill Customer Email!");
            return;
        }

        if (!string.IsNullOrEmpty(custother))
        {
            custother = custother.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        }

        customerinfo[0].Name = custname;
        customerinfo[0].Address = custaddress.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        customerinfo[0].Telephone = custtelephone;
        customerinfo[0].Email = custemail;
        customerinfo[0].WebSite = custwebsite;
        customerinfo[0].Facebook = custfacebook;
        customerinfo[0].Other = custother;
        projecthd.CustomerInfo = Newtonsoft.Json.JsonConvert.SerializeObject(customerinfo);

        projecthd.ContactInfo = Newtonsoft.Json.JsonConvert.SerializeObject(listcontact);
        projecthd.ProjectHdstatus = "Open";
        projecthd.Active = "Y";
        projecthd.ProjectHdhistories.Add(new ProjectHdhistory() { ProjectHdid = projecthd.Id, Remark = "Update", EditorId = userid });
        var update = await pj.SaveProjectHD(projecthd);

        NavManager.NavigateTo("/Data/ProjectDetail/" + id);
    }

    void OnTodayPlanStart()
    {
        projecthd.PlanStartDate = DateTime.Now;
    }

    void OnTodayPlanFinish()
    {
        projecthd.PlanFinishDate = DateTime.Now;
    }

    //async Task OnLoadData(LoadDataArgs args)
    //{
    //    if (args.Filter.Length <= 2)
    //    {
    //        if (custommember is not null)
    //        {
    //            custommember.Clear();
    //        }
    //    }
    //    if (args.Filter.Length > 2)
    //    {
    //        custommember = await pj.GetCustomerByContain(args.Filter.ToUpper().ToString());
    //        InvokeAsync(StateHasChanged);
    //    }
    //}

    //async Task GetMemberID(object value)
    //{
    //    if (custommember is not null)
    //    {
    //        var select = custommember.Where(c => c.CompanyName.ToUpper() == value.ToString().ToUpper()).ToList();
    //        if (select.Count == 1)
    //        {
    //            customerid = select[0].Id;
    //        }
    //    }
    //}

    async Task ErrorMessage(string message)
    {
        await DialogService.OpenAsync("Warning", ds =>
            @<div>
                @message
            </div>
            , new DialogOptions() { CloseDialogOnOverlayClick = true });
    }

    public void Dispose()
    {
        if (customerinfo is not null) customerinfo.Clear();
        if (listcontact is not null) listcontact.Clear();
        Console.WriteLine("Disconnected");
    }
}
