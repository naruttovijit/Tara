@page "/Data/ProjectCreate"

@implements IDisposable;

@using ModelM2s;
@using ModelM4s;
@using Data;
@using System.IO;
@using System.Globalization;
@using Radzen;
@using Radzen.Blazor;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization


@inject IWebHostEnvironment env
@inject ProjectData pj;
@inject NavigationManager NavManager
@inject DialogService DialogService

<RadzenNotification />

<br />
<h3>New Project</h3>
<br />
@*Create Project HD*@
<EditForm Model="formmain">
    <div class="card">
        <div class="card-header">Create Project Main</div>
        <div class="card-body">
            <div class="row">
                <div class="col-2"><p><b>Main Project Name</b></p></div>
                <div class="col"><RadzenTextBox style="width: 100%" id="MainName" @bind-Value="formmain.ProjectName" /></div>
            </div>

            <div class="row">
                <div class="col-2"><p><b>Description</b></p></div>
                <div class="col"><RadzenTextArea style="width: 100%" @bind-Value="maindesc" Cols="30" Rows="3" /></div>
            </div>

            <div class="row">
                <div class="col-2"><p><b>Remark</b></p></div>
                <div class="col"><RadzenTextArea style="width: 100%" @bind-Value="mainremark" Cols="30" Rows="3" /></div>
            </div>

            <div class="row">
                <div class="col-2"><p><b>Budget</b></p></div>
                <div class="col"><InputNumber style="width: 100%" id="MainBudget" @bind-Value="formmain.Budget"></InputNumber></div>
                <div class="col-1"><p>THB</p></div>
            </div>

            <div class="row">
                <div class="col-2"><p><b>Started Date</b></p></div>
                <div class="col">
                    <p>
                         <RadzenDatePicker @bind-Value=@formmain.PlanStartDate DateFormat="dd/MM/yyyy" Class="w-100">
                            <FooterTemplate>
                                <RadzenButton Click=@OnTodayPlanStart Text="Today" Class="my-3 w-100" />
                            </FooterTemplate>
                        </RadzenDatePicker>
                    </p>
                </div>
                <div class="col-2"><p><b>Finished Date</b></p></div>
                <div class="col">
                    <p>
                        <RadzenDatePicker @bind-Value=@formmain.PlanFinishDate DateFormat="dd/MM/yyyy" Class="w-100">
                            <FooterTemplate>
                            <RadzenButton Click=@OnTodayPlanFinish Text="Today" Class="my-3 w-100" />
                            </FooterTemplate>
                        </RadzenDatePicker>
                    </p>
                </div>
            </div>
            <br />

            <div class="card">
                <div class="card-header">Customer</div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-2"><p><b>Customer Name</b></p></div>
                        <div class="col"><RadzenTextBox style="width: 100%" @bind-Value="custname" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><p><b>Address</b></p></div>
                        <div class="col"><RadzenTextArea style="width: 100%" @bind-Value="custaddress" Cols="30" Rows="3" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><p><b>Telephone</b></p></div>
                        <div class="col"><RadzenTextBox style="width: 100%" @bind-Value="custtelephone" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><p><b>Email</b></p></div>
                        <div class="col"><RadzenTextBox style="width: 100%" @bind-Value="custemail" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><p><b>Website</b></p></div>
                        <div class="col"><RadzenTextBox style="width: 100%" @bind-Value="custwebsite" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><p><b>Facebook</b></p></div>
                        <div class="col"><RadzenTextBox style="width: 100%" @bind-Value="custfacebook" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><p><b>Other</b></p></div>
                        <div class="col"><RadzenTextArea style="width: 100%" @bind-Value="custother" Cols="30" Rows="3" /></div>
                    </div>
                </div>
            </div>

            <br />

            <div class="card">
                <div class="card-header">Contact</div>
                <div class="card-body">
                    @if (ListContact is not null)
                    {
                        foreach(var list in ListContact)
                        {
                            <div class="card-body bg-info bg-opacity-10">
                                <div class="row">
                                    <div class="col-1"><p><b>Name</b></p></div>
                                    <div class="col">@list.Name</div>
                                    <div class="col-1">
                                        <RadzenButton Click=@(args => ListContact.Remove(list)) Text="X" ButtonStyle="ButtonStyle.Danger" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-1"><p><b>Position</b></p></div>
                                    <div class="col">@list.Position</div>
                                </div>
                                <div class="row">
                                    <div class="col-1"><p><b>Address</b></p></div>
                                    <div class="col" style="white-space: pre-wrap;">@list.Address</div>
                                </div>
                                <div class="row">
                                    <div class="col-1"><p><b>Email</b></p></div>
                                    <div class="col">@list.Email</div>
                                </div>
                                <div class="row">
                                    <div class="col-1"><p><b>Mobile No.</b></p></div>
                                    <div class="col">@list.MobileNo</div>
                                </div>
                                <div class="row">
                                    <div class="col-1"><p><b>Other</b></p></div>
                                    <div class="col" style="white-space: pre-wrap;">@list.Other</div>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-2"><p><b>Name</b></p></div>
                        <div class="col"><RadzenTextBox style="width: 100%" id="MainName" @bind-Value="contactname" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><p><b>Position</b></p></div>
                        <div class="col"><RadzenTextBox style="width: 100%" @bind-Value="contactpos" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><p><b>Address</b></p></div>
                        <div class="col"><RadzenTextArea style="width: 100%" @bind-Value="contactaddr" Cols="30" Rows="3" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><p><b>Email</b></p></div>
                        <div class="col"><RadzenTextBox style="width: 100%" @bind-Value="contactemail" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><p><b>Mobile No.</b></p></div>
                        <div class="col"><RadzenTextBox style="width: 100%" @bind-Value="contactmobile" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><p><b>Other</b></p></div>
                        <div class="col"><RadzenTextArea style="width: 100%" @bind-Value="contactother" Cols="30" Rows="3" /></div>
                    </div>
                    <div class="row">
                        <div class="col-3">
                            <RadzenButton Click=@(args => SaveContact()) Icon="add" Text="Add Contact" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-cols-sm-auto">
                @if (MainSaveshow)
                {
                    <RadzenButton Click=@(args => SaveProjectMain()) Icon="save" Text="Next" ButtonStyle="ButtonStyle.Info" />
                }
            </div>
        </div>
    </div> 
</EditForm>
<br />

@*Create Project Sub*@
@if (Subshow)
{
    <div class="card">
        <div class="card-header">Create Project Sub</div>
        <div class="card-body">
            <div class="row">
                <div class="col-2"><p><b>Project Sub Name</b></p></div>
                <div class="col"><RadzenTextBox style="width: 100%" id="SubName" @bind-Value="formsub.ProjectSubName" /></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Description</b></p></div>
                <div class="col"><RadzenTextArea style="width: 100%" @bind-Value="subdesc" Cols="30" Rows="3" /></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Remark</b></p></div>
                <div class="col"><RadzenTextArea style="width: 100%" @bind-Value="subremark" Cols="30" Rows="3" /></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Budget</b></p></div>
                <div class="col"><InputNumber style="width: 100%" id="SubName" @bind-Value="formsub.Budget"></InputNumber></div>
                <div class="col-1"><p>THB</p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Started Date</b></p></div>
                <div class="col">
                    <p>
                        <RadzenDatePicker @bind-Value=@formsub.PlanStartDate DateFormat="dd/MM/yyyy" Class="w-100">
                            <FooterTemplate>
                                <RadzenButton Click=@OnTodaySubStart Text="Today" Class="my-3 w-100" />
                            </FooterTemplate>
                        </RadzenDatePicker>
                    </p>
                </div>
                <div class="col-2"><p><b>Finished Date</b></p></div>
                <div class="col">
                    <p>
                        <RadzenDatePicker @bind-Value=@formsub.PlanFinishDate DateFormat="dd/MM/yyyy" Class="w-100">
                            <FooterTemplate>
                                <RadzenButton Click=@OnTodaySubFinish Text="Today" Class="my-3 w-100" />
                            </FooterTemplate>
                        </RadzenDatePicker>
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>RA Type</b></p></div>
                <div class="col">
                    <p>
                        <InputSelect style="width: 100%" id="SubRAType" @bind-Value="formRAType.RatypeMasterId">
                            <option value="0">------------Select RA Type------------</option>
                            @if (ratype is not null)
                            {
                                foreach (var list in ratype)
                                {
                                    <option value="@list.Id">@list.Name</option>
                                }
                            }
                        </InputSelect>
                    </p>
                </div>
            </div>

            <br>

            <div class="card">
                <div class="card-header">Project Capability</div>
                <div class="card-body">
                    @if (ListCategory is not null)
                        {
                            foreach (var list in ListCategory)
                            {
                                var cate = capability.Where(w => w.Id == list.CategoryCatId).FirstOrDefault();
                                <div class="row">
                                    <div class="col">@cate.CategoryCat - @list.CategoryCatSub</div>
                                    <div class="col-1"><RadzenButton Click=@(args => ListCategory.Remove(list)) Text="X" ButtonStyle="ButtonStyle.Danger" /></div>
                                </div>
                            }
                        }
                </div>
                <div class="card-body">
                    <div class="row">
                        <InputSelect id="SubCategory" @bind-Value="categoryid">
                            <option value="0">------------Select Category------------</option>
                            @if (capability is not null)
                            {
                                foreach (var list in capability)
                                {
                                    foreach (var sub in list.MasterCapabilityCatSubs)
                                    {
                                        <option value="@sub.Id">@list.CategoryCat - @sub.CategoryCatSub</option>
                                    }
                                }
                            }
                        </InputSelect>
                        <RadzenButton Click=@(args => SaveCategory(categoryid)) Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" />
                    </div>
                </div>
            </div>

            <div class="row">
                <RadzenButton Click=@(args => SaveProjectSub()) Text="Add Project Sub" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
            </div>
        </div>
    </div>
    <br />

    @if (formmain.ProjectSubProjectTls.Count > 0)
    {
        <div class="card">
            <div class="card-header">Project Sub List</div>
            <div class="card-body">
                 @foreach (var sub in formmain.ProjectSubProjectTls)
                 {
                     <div class="card-body bg-info bg-opacity-10">
                         <div class="row">
                            <div class="col-2"><p><b>Project Sub Name</b></p></div>
                            <div class="col"><p>@sub.ProjectSubName</p></div>
                            <div class="col-1"><div class="col-1"><RadzenButton Click=@(args => formmain.ProjectSubProjectTls.Remove(sub)) Text="X" ButtonStyle="ButtonStyle.Danger" /></div></div>
                        </div>

                        <div class="row">
                            <div class="col-2"><p><b>Description</b></p></div>
                            <div class="col"><p style="white-space: pre-wrap;">@sub.Description</p></div>
                        </div>

                        <div class="row">
                            <div class="col-2"><p><b>Remarked</b></p></div>
                            <div class="col"><p style="white-space: pre-wrap;">@sub.Remark</p></div>
                        </div>

                        <div class="row">
                            <div class="col-2"><p><b>Budget</b></p></div>
                            <div class="col"><p>@String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", sub.Budget)</p></div>
                        </div>

                        <div class="row">
                            <div class="col-2"><p><b>Started Date</b></p></div>
                            <div class="col"><p>@sub.PlanStartDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</p></div>
                            <div class="col-2"><p><b>Finished Date</b></p></div>
                            <div class="col"><p>@sub.PlanFinishDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</p></div>
                        </div>

                        @foreach (var list in @sub.ProjectRatypeTls)
                        {
                            var ra = ratype.Where(w => w.Id == list.RatypeMasterId).FirstOrDefault();
                            <div class="row">
                                <div class="col-2"><p><b>RA Type</b></p></div>
                                <div class="col"><p>@ra.Name</p></div>
                            </div>

                            <div class="row">
                                <div class="col-2"><p>Capability</p></div>
                                <div class="col">
                                    <p>
                                        @if (list.MemberCapability is not null)
                                        {
                                            ShowCategory(list.MemberCapability);
                                            if(showcate is not null)
                                            {
                                                <p>
                                                    <table style="width:100%">
                                                        @foreach (var categorylist in showcate)
                                                        {
                                                            var cate = capability.Where(w => w.Id == categorylist.CategoryCatId).FirstOrDefault();
                                                            <tr>
                                                                <td>@cate.CategoryCat - @categorylist.CategoryCatSub</td>
                                                            </tr>
                                                        }
                                                    </table>
                                                </p>
                            
                                            }
                                        }
                                    </p>
                                </div>
                            </div>
                        }
                     </div>
                 }
             
                 <div class="row">
                     <RadzenButton style="width: 160px" Icon="save" BusyText="Saving ..." IsBusy=@busy Click=@SaveAll Text="Save All" />
                 </div>
            </div>
        </div>
    }
}

@code {
    public ProjectHd formmain { get; set; } = new ProjectHd();
    public ProjectSubProjectTl formsub { get; set; } = new ProjectSubProjectTl();
    public ProjectRatypeTl formRAType { get; set; } = new ProjectRatypeTl();
    public List<CustomContact> ListContact { get; set; } = new List<CustomContact>();
    public List<MasterCapabilityCatSub> ListCategory { get; set; } = new List<MasterCapabilityCatSub>();
    public List<ProjectHdhistory> HDhis { get; set; } = new List<ProjectHdhistory>();
    public List<ProjectSubProjectTlhistory> Subhis { get; set; } = new List<ProjectSubProjectTlhistory>();
    public List<CustomCustomer> CustomerData { get; set; } = new List<CustomCustomer>();

    private List<MasterCapabilityCat> capability;
    private List<RatypeMaster> ratype;
    private List<MasterCapabilityCatSub> showcate;

    int customerid;
    //int contactid;
    int categoryid;

    private bool Subshow = false;
    private bool MainSaveshow = true;
    private bool uploadfile = true;
    bool busy;

    string Message = "No file selected";
    string DocDesc;
    IBrowserFile selectedFile;
    DateTime? value = DateTime.Now;

    string maindesc;
    string mainremark;
    string subdesc;
    string subremark;

    string contactname;
    string contactpos;
    string contactaddr;
    string contactemail;
    string contactmobile;
    string contactother;

    string custname;
    string custaddress;
    string custtelephone;
    string custemail;
    string custwebsite;
    string custfacebook;
    string custother;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }

    int userrole;
    string usermemberno;
    int userid;

    protected override async Task OnInitializedAsync()
    {
        ratype = await pj.GetRATypeMaster();
        capability = await pj.GetAllCapability();
        formmain.PlanStartDate = DateTime.Now;
        formmain.PlanFinishDate = DateTime.Now;
        formsub.PlanStartDate = DateTime.Now;
        formsub.PlanFinishDate = DateTime.Now;
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
        GetDataAuthen();
        StateHasChanged();
    }

    async Task GetDataAuthen()
    {
        usermemberno = string.Empty;

        AuthenticationState authenticationState;
        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;
        var claim = this.AuthenticationStateUser.Claims.ToList();
        userrole = int.Parse(claim[1].Value);
        usermemberno = claim[2].Value;
        userid = int.Parse(claim[3].Value);
    }

    async void SaveContact() //Add contact to Project HD 
    {
        if (string.IsNullOrEmpty(contactname))
        {
            await ErrorMessage("Please fill in Contact Name!");
            return;
        }
        if (string.IsNullOrEmpty(contactemail))
        {
            await ErrorMessage("Please fill in Contact Email!");
            return;
        }
        if (string.IsNullOrEmpty(contactmobile))
        {
            await ErrorMessage("Please fill in Contact Mobile!");
            return;
        }
        if (!string.IsNullOrEmpty(contactaddr))
        {
            contactaddr = contactaddr.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        }
        if (!string.IsNullOrEmpty(contactother))
        {
            contactother = contactother.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        }

        ListContact.Add(new CustomContact(){
            Name = contactname,
            Position = contactpos,
            Address = contactaddr,
            Email = contactemail,
            MobileNo = contactmobile,
            Other = contactother
        });

        formmain.ContactInfo = Newtonsoft.Json.JsonConvert.SerializeObject(ListContact);

        contactname = string.Empty;
        contactpos = string.Empty;
        contactaddr = string.Empty;
        contactemail = string.Empty;
        contactmobile = string.Empty;
        contactother = string.Empty;
    }

    void SaveCategory(int id) //Add category to Project Sub
    {
        if (id > 0)
        {
            //var result = subcapability.Where(w=>id == id).FirstOrDefault();
            //ListCategory.Add(new MasterCapabilityCatSub() { Id = result.Id, CategoryCatSub = result.CategoryCatSub, CategoryCatId = result.CategoryCatId, CategoryCat = result.CategoryCat });

            foreach (var cate in capability)
            {
                var sorted = cate.MasterCapabilityCatSubs.Where(w => w.Id == id).FirstOrDefault();
                if (sorted is not null)
                {
                    var list = ListCategory.Where(w => w.Id == sorted.Id);
                    if (list.Count() == 0)
                    {
                        ListCategory.Add(new MasterCapabilityCatSub() { Id = sorted.Id, CategoryCatId = sorted.CategoryCatId, CategoryCatSub = sorted.CategoryCatSub });
                        return;
                    }
                }
            }
        }

    }

    async void SaveProjectMain() //Add data to Project HD List<>
    {
        if (string.IsNullOrEmpty(formmain.ProjectName))
        {
            await ErrorMessage("Please fill in Main Project Name!");
            return;
        }
        if (string.IsNullOrEmpty(custname))
        {
            await ErrorMessage("Please fill Customer Name!");
            return;
        }
        if (string.IsNullOrEmpty(custaddress))
        {
            await ErrorMessage("Please fill Customer Address!");
            return;
        }
        if (string.IsNullOrEmpty(custtelephone))
        {
            await ErrorMessage("Please fill Customer Telephone!");
            return;
        }
        if (string.IsNullOrEmpty(custemail))
        {
            await ErrorMessage("Please fill Customer Email!");
            return;
        }
        if (ListContact is null || ListContact.Count == 0)
        {
            await ErrorMessage("Please fill Contact!");
            return;
        }

        var list = await pj.GetProjectHDbyProjectName(formmain.ProjectName);
        if (list is not null && list.Count() > 0)
        {
            await ErrorMessage("This Main Project name already exit!");
            return;
        }

        if (!string.IsNullOrEmpty(maindesc))
        {
            formmain.Description = maindesc.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        }
        if (!string.IsNullOrEmpty(mainremark))
        {
             formmain.Remark = mainremark.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        }

        HDSave();
        //CustomerData = new List<Customer>();
        //var result = custommember.Where(c => c.Id == customerid).FirstOrDefault();
        //if (result is not null)
        //{
        //    CustomerData.Add(new Customer()
        //        {
        //            Id = result.Id,
        //            CreateDate = result.CreateDate,
        //            CustomerId = result.CustomerId,
        //            Name = result.Name,
        //            MemberNo = result.MemberNo,
        //            CompanyName = result.CompanyName,
        //            Telephone = result.Telephone,
        //            Email = result.Email,
        //            LineId = result.LineId
        //        });
        //    formmain.CustomerId = result.Id;
        //}

        if (string.IsNullOrEmpty(custother))
        {
            custother = custother.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        }
        CustomerData.Add(new CustomCustomer()
                {
            Name = custname,
            Address = custaddress.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString(),
            Telephone = custtelephone,
            Email = custemail,
            WebSite = custwebsite,
            Facebook = custfacebook,
            Other = custother
        });
        formmain.CustomerInfo = Newtonsoft.Json.JsonConvert.SerializeObject(CustomerData);
        
        formmain.ProjectHdstatus = "Open";
        formmain.Active = "Y";
        formmain.ProjectHdhistories.Add(new ProjectHdhistory() { ProjectHdid = formmain.Id, Remark = "Create", EditorId = userid });
        formsub.ProjectHdid = formmain.Id;

        Showsub();
        formsub.ProjectSubName = formmain.ProjectName;
        subdesc = formmain.Description;
        subremark = formmain.Remark;
        formsub.Budget = formmain.Budget;
        formsub.PlanStartDate = formmain.PlanStartDate;
        formsub.PlanFinishDate = formmain.PlanFinishDate;

        StateHasChanged();
    }

    async void SaveProjectSub() //Add data to Project Sub List<>
    {
        if (string.IsNullOrEmpty(formsub.ProjectSubName))
        {
            await ErrorMessage("Please fill in Project Sub Name!");
            return;
        }
        if (formRAType.RatypeMasterId == 0)
        {
            await ErrorMessage("Please select RA Type!");
            return;
        }
        if (ListCategory.Count == 0)
        {
            await ErrorMessage("Please select Cappability!");
            return;
        }

        var list = await pj.GetProjectSubbySubName(formsub.ProjectSubName);
        if (list is not null && list.Count() > 0)
        {
            await ErrorMessage("This Project Sub name already exit!");
            return;
        }

        formRAType.MemberCapability = Newtonsoft.Json.JsonConvert.SerializeObject(ListCategory);
        
        if (!string.IsNullOrEmpty(subdesc))
        {
            formsub.Description = subdesc.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        }
        if (!string.IsNullOrEmpty(subremark))
        {
            formsub.Remark = subremark.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        }
        
        formsub.ProjectRatypeTls.Add(formRAType);
        formsub.ProjectSubStatus = "Inquiry";
        formsub.Active = "Y";
        formsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = formsub.Id, Remark = "Create and Inquiry", EditorId = userid });
        formmain.ProjectSubProjectTls.Add(formsub);

        formsub = new ProjectSubProjectTl();
        formsub.ProjectHdid = formmain.Id;
        ListCategory = new List<MasterCapabilityCatSub>();

        subdesc = string.Empty;
        subremark = string.Empty;

        uploadfile = true;
        this.StateHasChanged();
    }

    async Task SaveAll()
    {
        busy = true;
        var result = await pj.SaveProjectHD(formmain);
        await Task.Delay(1000);
        busy = false;
        NavManager.NavigateTo("/Data/Project");
    }

    private void ShowCategory(string cate) //Get category from Project Sub List<> to json format and show in page
    {
        showcate = new List<MasterCapabilityCatSub>();
        showcate = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(cate);
    }

    private void Showsub() //After click next in Project HD show  Project sub area
    {
        Subshow = true;
    }

    private void HDSave() //After click next in Project HD hide button
    {
        MainSaveshow = false;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.GetMultipleFiles()[0];
        Message = $"{selectedFile.Name} ({selectedFile.Size} bytes) file selected";
        this.StateHasChanged();
    }

    private async void OnSubmit() //Upload file (image,pdf) to local folders
    {
        if (selectedFile != null)
        {
            Stream stream = selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 100);
            string filename = formsub.ProjectSubRunNo + "_" + selectedFile.Name;
            string filetype = string.Empty;
            string filepath = string.Empty;
            if (selectedFile.Name.ToUpper().Contains("PDF"))
            {
                filetype = "\\PDFFiles\\" + filename;
                filepath = "/PDFFiles/" + filename;
            }
            else
            {
                filetype = "\\PicFiles\\" + filename;
                filepath = "/PicFiles/" + filename;
            }
            var path = $"{env.WebRootPath}{filetype}";
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();

            formsub.ProjectDocuments.Add(new ProjectDocument() { ProjectSubProjectTlid = formsub.Id, DocumentPath = filepath, Description = DocDesc, Active = "Y", EditorId = userid });
        }

        uploadfile = false;
        this.StateHasChanged();
    } 

    void OnTodayPlanStart()
    {
        formmain.PlanStartDate = DateTime.Now;
    }

    void OnTodayPlanFinish()
    {
        formmain.PlanFinishDate = DateTime.Now;
    }

    void OnTodaySubStart()
    {
        formsub.PlanStartDate = DateTime.Now;
    }

    void OnTodaySubFinish()
    {
        formsub.PlanFinishDate = DateTime.Now;
    }

    //async Task OnLoadData(LoadDataArgs args)
    //{
    //    if (args.Filter.Length <= 2)
    //    {
    //        if (custommember is not null)
    //        {
    //            custommember.Clear();
    //        }
    //    }
    //    if (args.Filter.Length > 2)
    //    {
    //        custommember = await pj.GetCustomerByContain(args.Filter.ToUpper().ToString());
    //        InvokeAsync(StateHasChanged);
    //    }
    //}

    //async void GetCustomerID(object value)
    //{
    //    if (custommember is not null)
    //    {
    //        var select = custommember.Where(c => c.CompanyName.ToUpper() == value.ToString().ToUpper()).ToList();
    //        if (select.Count == 1)
    //        {
    //            customerid = select[0].Id;
    //        }
    //    }
    //}

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
    }

    void Close(dynamic result)
    {
    }

    async Task ErrorMessage(string message)
    {
        await DialogService.OpenAsync("Warning", ds =>
            @<div>
                @message
        </div>
    , new DialogOptions() { CloseDialogOnOverlayClick = true });
    }

    public void Dispose()
    {
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;

        if (ListContact is not null) ListContact.Clear();
        if (ListCategory is not null) ListCategory.Clear();
        if (CustomerData is not null) CustomerData.Clear();
        if (HDhis is not null) HDhis.Clear();
        if (Subhis is not null) Subhis.Clear();
        if (ListContact is not null) ListContact.Clear();
        if (capability is not null) capability.Clear();
        if (ratype is not null) ratype.Clear();
        if (showcate is not null) showcate.Clear();
        Console.WriteLine("Disconnected");
    }
}
