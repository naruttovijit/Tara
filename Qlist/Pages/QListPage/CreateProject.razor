@page "/Data/ProjectCreate"

@implements IDisposable;

@using ModelM2s;
@using ModelM4s;
@using Data;
@using System.IO

@inject IWebHostEnvironment env
@inject ProjectData pj;
@inject NavigationManager NavManager

<br />
<h3>Create New Project</h3>

@*Create Project HD*@
<EditForm Model="formmain">
    <div class="container">
        <div class="row">
            <div class="col-2">
                <p>Main Project Name :</p>
            </div>
            <div class="col">
                <InputText style="width: 100%" id="MainName" @bind-Value="formmain.ProjectName"></InputText>
            </div>
        </div>

        <div class="row">
            <div class="col-2">
                <p>Description :</p>
            </div>
            <div class="col">
                <InputText style="width: 100%" id="MainDesc" @bind-Value="formmain.Description"></InputText>
            </div>
        </div>

        <div class="row">
            <div class="col-2">
                <p>Remarked :</p>
            </div>
            <div class="col">
                <InputText style="width: 100%" id="MainRemark" @bind-Value="formmain.Remark"></InputText>
            </div>
        </div>

         <div class="row">
            <div class="col-2">
                <p>Customer Infomation :</p>
            </div>
            <div class="col">
                <InputSelect style="width: 100%" id="MainCustomer" @bind-Value="customerid" @onclick="GetContact">
                    <option value="0">------------Select Customer------------</option>
                    @if (member is not null)
                    {
                        foreach (var list in member)
                        {
                            <option value="@list.Id">@list.CompanyNameEn (@list.CompanyNameTh)</option>
                        }
                    }
                </InputSelect>
            </div>
        </div>

        <div class="row">
            <div class="col-2">
                <p>Budget :</p>
            </div>
            <div class="col">
                <InputNumber style="width: 100%" id="MainBudget" @bind-Value="formmain.Budget"></InputNumber>
            </div>
            <div class="col-1">
                <p>THB</p>
            </div>
        </div>

        <div class="row">
            <div class="col-2">
                <p>Started Date :</p>
            </div>
            <div class="col">
                <InputDate style="width: 100%" id="MainStartDate" @bind-Value="formmain.PlanStartDate"></InputDate>
            </div>
            <div class="col-2">
                <p>Finished Date :</p>
            </div>
            <div class="col">
                <InputDate style="width: 100%" id="MainFinishDate" @bind-Value="formmain.PlanFinishDate"></InputDate>
            </div>

        </div>


    </div>

    <div class="container" style="background-color:white; border:solid">
        <h4>Contact Infomation</h4>
        <p>
            <table style="width:100%">
                <tr>
                    <th style="width: 37.5%">Thai Name</th>
                    <th style="width: 37.5%">English Name</th>
                    <th style="width: 15%">Tel.</th>
                    <th class="text-center" style="width: 10%">Delete</th>
                </tr>
                @if (ListContact is not null)
                {
                    foreach (var list in ListContact)
                    {
                        <tr>
                            <td>@list.Title @list.FirstNameTh @list.LastNameTh</td>
                            <td>@list.FirstNameEn @list.LastNameEn</td>
                            <td>@list.MobileNo</td>
                            <td class="text-center"><button @onclick="() => ListContact.Remove(list)">X</button>
                            </td>
                        </tr>
                    }
                }
            </table>
        </p>
        <div class="container">
            <p>
                <InputSelect id="MainContact" @bind-Value="contactid">
                    <option value="0">------------Select Contact------------</option>
                    @if (contact is not null)
                    {
                        foreach (var list in contact)
                        {
                            <option value="@list.Id">@list.FirstNameTh @list.LastNameTh</option>
                        }
                    }
                </InputSelect> &nbsp;&nbsp;
                <button @onclick="()=>SaveContact(contactid)">Add Contact</button>
            </p>
        </div>
    </div>
    
    <br />
    
    @if(MainSaveshow)
    {
        <button @onclick="SaveProjectMain">Next</button>
    }
    
</EditForm>

@*Create Project Sub*@
@if (Subshow)
{
    if (formmain.ProjectSubProjectTls is not null)
    {
        foreach (var sub in formmain.ProjectSubProjectTls)
        {
            <div class="container" style="background-color:lightgray; border:solid">
                 <div class="row">
                    <div class="col-2"><p>Project Sub Name :</p></div>
                    <div class="col"><p>@sub.ProjectSubName</p></div>
                    <div class="col-1"> <div class="col-1"><button style="align-items:end" @onclick="() => formmain.ProjectSubProjectTls.Remove(sub)">Delete</button></div></div>
                </div>

                <div class="row">
                    <div class="col-2"><p>Description :</p></div>
                    <div class="col"><p>@sub.Description</p></div>
                </div>

                <div class="row">
                    <div class="col-2"><p>Remarked :</p></div>
                    <div class="col"><p>@sub.Remark</p></div>
                </div>

                <div class="row">
                    <div class="col-2"><p>Budget :</p></div>
                    <div class="col"><p>@sub.Budget</p></div>
                </div>

                <div class="row">
                    <div class="col-2"><p>Started Date :</p></div>
                    <div class="col"><p>@sub.PlanStartDate</p></div>
                    <div class="col-2"><p>Finished Date :</p></div>
                    <div class="col"><p>@sub.PlanFinishDate</p></div>
                </div>

                @foreach (var list in @sub.ProjectRatypeTls)
                {
                    var ra = ratype.Where(w => w.Id == list.RatypeMasterId).FirstOrDefault();
                    <div class="row">
                        <div class="col-2"><p>RA Type :</p></div>
                        <div class="col"><p>@ra.Name</p></div>
                    </div>

                    <div class="row">
                        <div class="col-2"><p>Category :</p></div>
                        <div class="col">
                            <p>
                                @if (list.MemberCapability is not null)
                                {
                                    ShowCategory(list.MemberCapability);
                                    if(showcate is not null)
                                    {
                                        <p>
                                            <table style="width:100%">
                                                @foreach (var categorylist in showcate)
                                                {
                                                    var cate = category.Where(w => w.Id == categorylist.CategoryCatId).FirstOrDefault();
                                                    <tr>
                                                        <td>@cate.CategoryCat - @categorylist.CategoryCatSub</td>
                                                    </tr>
                                                }
                                            </table>
                                        </p>
                            
                                    }
                                }
                            </p>
                        </div>
                    </div>
                }

                @foreach (var file in sub.ProjectDocuments)
                {
                    if (file.DocumentPath.ToUpper().Contains("PDFFILES"))
                    {
                        <a href="@file.DocumentPath">Link</a>
                    }
                    else
                    {
                        <img src="@file.DocumentPath" width="300px" />
                    }
                    <br />
                }
            </div>
            <br />
            <div class="container">
                <div class="row-cols-4">
                    <button @onclick="SaveAll">Submit</button>
                </div>
            </div>
        }
    }

    <br />
    <br />
    <div class="container" style="background-color:white; border:solid">
        <h4>Create Project Sub</h4>
        <EditForm Model="formsub">
            <div class="container">
                <div class="row">
                    <div class="col-2"><p>Project Sub Name :</p></div>
                    <div class="col"><InputText style="width: 100%" id="SubName" @bind-Value="formsub.ProjectSubName"></InputText></div>
                </div>

                <div class="row">
                    <div class="col-2"><p>Description :</p></div>
                    <div class="col"><InputText style="width: 100%" id="SubName" @bind-Value="formsub.Description"></InputText></div>
                </div>

                <div class="row">
                    <div class="col-2"><p>Remarked :</p></div>
                    <div class="col"><InputText style="width: 100%" id="SubName" @bind-Value="formsub.Remark"></InputText></div>
                </div>

                <div class="row">
                    <div class="col-2"><p>Budget :</p></div>
                    <div class="col"><InputNumber style="width: 100%" id="SubName" @bind-Value="formsub.Budget"></InputNumber></div>
                    <div class="col-1"><p>THB</p></div>
                </div>

                <div class="row">
                    <div class="col-2"><p>Started Date :</p></div>
                    <div class="col"><InputDate style="width: 100%" id="SubStartDate" @bind-Value="formsub.PlanStartDate"></InputDate></div>
                    <div class="col-2"><p>Finished Date :</p></div>
                    <div class="col"><InputDate style="width: 100%" id="SubStartDate" @bind-Value="formsub.PlanFinishDate"></InputDate></div>
                </div>

                <div class="row">
                    <div class="col-2"><p>RA Type :</p></div>
                    <div class="col">
                        <InputSelect style="width: 100%" id="SubRAType" @bind-Value="formRAType.RatypeMasterId">
                            <option value="0">------------Select RA Type------------</option>
                            @if (ratype is not null)
                            {
                                foreach (var list in ratype)
                                {
                                    <option value="@list.Id">@list.Name</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="container" style="background-color:white; border:solid">
                    <h4>Capability</h4>
                    <p>
                        <table style="width:100%; background-color:white">
                            <tr>
                                <th style="width: 45%">Capability</th>
                                <th style="width: 45%">Capability Sub</th>
                                <th class="text-center" style="width: 10%">Delete</th>
                            </tr>
                            @if (ListCategory is not null)
                            {
                                foreach (var list in ListCategory)
                                {
                                    var cate = category.Where(w => w.Id == list.CategoryCatId).FirstOrDefault();
                                    <tr>
                                        <td>@cate.CategoryCat</td>
                                        <td>@list.CategoryCatSub</td>
                                        <td class="text-center"><button @onclick="() => ListCategory.Remove(list)">X</button></td>
                                    </tr>
                                }
                            }
                        </table>
                    </p>

                    <div class="container">
                        <p>
                            <InputSelect id="SubCategory" @bind-Value="categoryid">
                                <option value="0">------------Select Category------------</option>
                                @if (category is not null)
                                {
                                    foreach (var list in category)
                                    {
                                        foreach (var sub in list.MasterCapabilityCatSubs)
                                        {
                                            <option value="@sub.Id">@list.CategoryCat - @sub.CategoryCatSub</option>
                                        }
                                    }
                                }
                            </InputSelect>
                            <button @onclick="()=>SaveCategory(categoryid)">Add Category</button>
                        </p>
                    </div>
                </div>
                <br>
                <div class="container">
                    <div class="row">
                        <p><InputFile OnChange="OnInputFileChange" /></p>
                    </div>
                    <div class="row">
                        <div class="col-2"><p>Document Description :</p></div>
                        <div class="col"><InputText style="width: 100%" id="docdesc" @bind-Value="DocDesc"></InputText></div>
                    </div>
                    <div class="row">
                        <p><button type="submit" @onclick="OnSubmit">Upload Selected File</button></p>
                    </div>
                </div>
                <br>
                <div class="container">
                    <p><button @onclick="SaveProjectSub">Add Project Sub</button></p>
                </div>
                <br>
            </div>
        </EditForm>
    </div>
    
}

@code {
    public ProjectHd formmain { get; set; } = new ProjectHd();
    public ProjectSubProjectTl formsub { get; set; } = new ProjectSubProjectTl();
    public ProjectRatypeTl formRAType { get; set; } = new ProjectRatypeTl();
    public List<MemberContactPerson> ListContact { get; set; } = new List<MemberContactPerson>();
    public List<MasterCapabilityCatSub> ListCategory { get; set; } = new List<MasterCapabilityCatSub>();
    public List<MemberMaster> Memberdata { get; set; } = new List<MemberMaster>();
    public List<ProjectHdhistory> HDhis { get; set; } = new List<ProjectHdhistory>();
    public List<ProjectSubProjectTlhistory> Subhis { get; set; } = new List<ProjectSubProjectTlhistory>();

    private List<MemberContactPerson> contact;
    private List<MemberContactPerson> allcontact;
    private List<MasterCapabilityCat> category;
    private List<RatypeMaster> ratype;
    private List<MemberMaster> member;
    private List<MasterCapabilityCatSub> showcate;

    int customerid;
    int contactid;
    int categoryid;

    private bool Subshow = false;
    private bool MainSaveshow = true;
    private bool uploadfile = true;

    string Message = "No file selected";
    string DocDesc;
    IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        ratype = await pj.GetRAType();
        member = await pj.GetAllMember();
        category = await pj.GetAllCapability();
        allcontact = await pj.GetAllContact();
        StateHasChanged();
    }

    async void GetContact()
    {
        if (customerid > 0)
        {
            //var membercontact = member.Where(w => w.Id == customerid).FirstOrDefault();
            //contact = await pj.GetContactByMemberNo(membercontact.MemberNo);
            contact = allcontact.Where(w => w.Id == customerid).ToList();
            StateHasChanged();
        }
    }

    void SaveContact(int id) //Add contact to Project HD 
    {
        var result = contact.Where(w => w.Id == id).FirstOrDefault();
        ListContact.Add(new MemberContactPerson() { 
            Id = result.Id,
            MemberNo = result.MemberNo,
            Title = result.Title,
            FirstNameTh = result.FirstNameTh,
            LastNameTh = result.LastNameTh,
            FirstNameEn = result.FirstNameEn,
            LastNameEn = result.LastNameEn,
            Nationality = result.Nationality,
            Position = result.Position,
            PhoneNo = result.PhoneNo,
            MobileNo = result.MobileNo,
            Email = result.Email,
            LineId = result.LineId,
            FaceBook = result.FaceBook,
            Linkedin = result.Linkedin,
            IsOwner = result.IsOwner,
            ShareBaht = result.ShareBaht,
            ShaerPercent = result.ShaerPercent
        });
    }

    void SaveCategory(int id) //Add category to Project Sub
    {
        foreach (var cate in category)
        {
            var sorted = cate.MasterCapabilityCatSubs.Where(w => w.Id == id).FirstOrDefault();
            if (sorted is not null)
            {
                ListCategory.Add(new MasterCapabilityCatSub() { Id = sorted.Id, CategoryCatId = sorted.CategoryCatId, CategoryCatSub = sorted.CategoryCatSub });
                return;
            }
        }
    }

    void SaveProjectMain() //Add data to Project HD List<>
    {
        HDSave();
        Memberdata = new List<MemberMaster>();
        var result = member.Where(c => c.Id == customerid).FirstOrDefault();
        if (result is not null)
        {
            Memberdata.Add(new MemberMaster()
                {
                    Id = result.Id,
                    CreateDate = result.CreateDate,
                    MemberNo = result.MemberNo,
                    MemberType = result.MemberType,
                    CompanyNameTh = result.CompanyNameTh,
                    CompanyNameEn = result.CompanyNameEn,
                    CompanyRegistrationNo = result.CompanyRegistrationNo,
                    RegisterCapital = result.RegisterCapital,
                    ThaiCapitalPercentage = result.ThaiCapitalPercentage,
                    EstablishYear = result.EstablishYear,
                    FixedAsset = result.FixedAsset,
                    NumberofEmployee = result.NumberofEmployee,
                    Telephone = result.Telephone,
                    Email = result.Email,
                    WebSite = result.WebSite,
                    Facebook = result.Facebook,
                    IsBoi = result.IsBoi,
                    IsCoreMemeber = result.IsCoreMemeber,
                    IsEnable = result.IsEnable,
                    ExpiredDate = result.ExpiredDate
                });
        }
        
        formmain.CustomerInfo = Newtonsoft.Json.JsonConvert.SerializeObject(Memberdata);
        formmain.ContactInfo = Newtonsoft.Json.JsonConvert.SerializeObject(ListContact);
        formmain.ProjectHdstatus = "Open";
        formmain.Active = "Y";
        formmain.ProjectHdhistories.Add(new ProjectHdhistory() { ProjectHdid = formmain.Id, Remark = "Create", EditorId = 1});
        formsub.ProjectHdid = formmain.Id;

        Showsub();
        formsub.ProjectSubName = formmain.ProjectName;
        formsub.Description = formmain.Description;
        formsub.Remark = formmain.Remark;
        formsub.Budget = formmain.Budget;
        formsub.PlanStartDate = formmain.PlanStartDate;
        formsub.PlanFinishDate = formmain.PlanFinishDate;
    }

    void SaveProjectSub() //Add data to Project Sub List<>
    {
        formRAType.MemberCapability = Newtonsoft.Json.JsonConvert.SerializeObject(ListCategory);
        formsub.ProjectRatypeTls.Add(formRAType);
        formsub.ProjectSubStatus = "Inquiry";
        formsub.Active = "Y";
        formsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = formsub.Id, Remark = "Create and Inquiry", EditorId = 1 });
        formmain.ProjectSubProjectTls.Add(formsub);

        formsub = new ProjectSubProjectTl();
        formsub.ProjectHdid = formmain.Id;
        ListCategory = new List<MasterCapabilityCatSub>();

        uploadfile = true;
        this.StateHasChanged();
    }

    async void SaveAll()
    {
        var result = await pj.SaveProjectHD(formmain);
        NavManager.NavigateTo("/Data/Project");
    }

    private void ShowCategory(string cate) //Get category from Project Sub List<> to json format and show in page
    {
        showcate = new List<MasterCapabilityCatSub>();
        showcate = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(cate);
    }

    private void Showsub() //After click next in Project HD show  Project sub area
    {
        Subshow = true;
    }

    private void HDSave() //After click next in Project HD hide button
    {
        MainSaveshow = false;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.GetMultipleFiles()[0];
        Message = $"{selectedFile.Name} ({selectedFile.Size} bytes) file selected";
        this.StateHasChanged();
    }

    private async void OnSubmit() //Upload file (image,pdf) to local folders
    {
        if (selectedFile != null)
        {
            Stream stream = selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 100);
            string filename = formsub.ProjectSubRunNo + "_" + selectedFile.Name;
            string filetype = string.Empty;
            string filepath = string.Empty;
            if (selectedFile.Name.ToUpper().Contains("PDF"))
            {
                filetype = "\\PDFFiles\\" + filename;
                filepath = "/PDFFiles/" + filename;
            }
            else
            {
                filetype = "\\PicFiles\\" + filename;
                filepath = "/PicFiles/" + filename;
            }
            var path = $"{env.WebRootPath}{filetype}";
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();

            formsub.ProjectDocuments.Add(new ProjectDocument() { ProjectSubProjectTlid = formsub.Id, DocumentPath = filepath, Description = DocDesc, Active = "Y", EditorId = 1 });
        }

        uploadfile = false;
        this.StateHasChanged();
    } 

    public void Dispose()
    {
        if (ListContact is not null) ListContact.Clear();
        if (ListCategory is not null) ListCategory.Clear();
        if (Memberdata is not null) Memberdata.Clear();
        if (HDhis is not null) HDhis.Clear();
        if (Subhis is not null) Subhis.Clear();
        if (contact is not null) contact.Clear();
        if (allcontact is not null) allcontact.Clear();
        if (category is not null) category.Clear();
        if (ratype is not null) ratype.Clear();
        if (member is not null) member.Clear();
        if (showcate is not null) showcate.Clear();
        Console.WriteLine("Disconnected");
    }
}
