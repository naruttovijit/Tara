@page "/Data/ProjectCreate"

@using ModelM2s;
@using ModelM4s;
@using ModelM2s.Json;
@using Data;
@using System.IO

@inject IWebHostEnvironment env
@inject ProjectData pj;

<h3>Create New Project</h3>

@*Create Project HD*@
<EditForm Model="formmain">
    &nbsp;<label>Main Project Name :</label> &nbsp; <InputText id="MainName" @bind-Value="formmain.ProjectName"></InputText><br /><br />
    &nbsp;<label>Description :</label> &nbsp; <InputText id="MainDesc" @bind-Value="formmain.Description"></InputText><br /><br />
    &nbsp;<label>Remarked :</label> &nbsp; <InputText id="MainRemark" @bind-Value="formmain.Remark"></InputText><br /><br />
    &nbsp;<label>Customer Infomation :</label> &nbsp; <InputSelect id="MainCustomer" @bind-Value="customerid">
        <option value="0">------------Select Customer------------</option>
        @if (customer is not null)
        {
            foreach (var list in customer)
            {
                <option value="@list.id">@list.CompanyNameEN (@list.CompanyNameTH)</option>
            }
        }
    </InputSelect><br /><br />
    <p style="background-color:white; border:solid">
        &nbsp;<h4>Contact Infomation</h4>
        <table style="width:100%">
            <tr>
                <th>Name</th>
                <th>Tel.</th>
                <th>Delete</th>
            </tr>
            @if (ListContact is not null)
            {
                foreach (var list in ListContact)
                {
                    <tr>
                        <td>@list.FirstNameTH</td>
                        <td>@list.MobileNo</td>
                        <td>
                            <button @onclick="() => ListContact.Remove(list)">
                                X
                            </button>
                        </td>
                    </tr>
                }
            }

        </table>
        <div>
            <InputSelect id="MainContact" @bind-Value="contactid">
                <option value="0">------------Select Contact------------</option>
                @if (contact is not null)
                {
                    foreach (var list in contact)
                    {
                        <option value="@list.id">@list.FirstNameTH</option>
                    }
                }
            </InputSelect> &nbsp;&nbsp;
            <button @onclick="()=>SaveContact(contactid)">Add Contact</button><br /><br />
        </div>
    </p>

    &nbsp;<label>Budget :</label> &nbsp; <InputNumber id="MainBudget" @bind-Value="formmain.Budget"></InputNumber> THB <br /><br />
    &nbsp;<label>Started Date :</label> &nbsp; <InputDate id="MainStartDate" @bind-Value="formmain.PlanStartDate"></InputDate> &nbsp;&nbsp;&nbsp;
    &nbsp;<label>Finished Date :</label> &nbsp; <InputDate id="MainFinishDate" @bind-Value="formmain.PlanFinishDate"></InputDate><br /><br />
    &nbsp;
    @if(MainSaveshow)
    {
        <button @onclick="SaveProjectMain">Next</button>
    }
    
</EditForm>

@*Create Project Sub*@
@if (Subshow)
{
    if (formmain.ProjectSubProjectTls is not null)
    {
        foreach (var sub in formmain.ProjectSubProjectTls)
        {
            <p style="background-color:white; border:solid">
                <button style="align-items:end" @onclick="() => formmain.ProjectSubProjectTls.Remove(sub)">Delete</button><br />
                &nbsp;<label>Project Sub Running No. : @sub.ProjectSubRunNo</label><br /><br />
                &nbsp;<label>Project Sub Name : @sub.ProjectSubName</label><br /><br />
                &nbsp;<label>Description : @sub.Description</label> <br /><br />
                &nbsp;<label>Remarked : @sub.Remark</label> <br /><br />
                &nbsp;<label>Budget : @sub.Budget</label> <br /><br />
                &nbsp;<label>Started Date : @sub.PlanStartDate</label> &nbsp;&nbsp;&nbsp;
                &nbsp;<label>Finished Date : @sub.PlanFinishDate</label> <br /><br />
                &nbsp;
                @foreach (var list in @sub.ProjectRatypeTls)
                {
                    var ra = ratype.Where(w => w.Id == list.RatypeMasterId).FirstOrDefault();
                    <label>RA Type : @ra.Name</label> <br />
                    <label>Category</label>
                    <br />
                    @if (list.MemberCapability is not null)
                    {
                        ShowCategory(list.MemberCapability);
                        if(showcate is not null)
                        {
                            <table style="width:100%">
                                @foreach (var categorylist in showcate)
                                {
                                    var cate = category.Where(w => w.Id == categorylist.CategoryCatId).FirstOrDefault();
                                    <tr>
                                        <td>@cate.CategoryCat - @categorylist.CategoryCatSub</td>
                                    </tr>
                                }
                            </table>
                        }
                    }
                }
                &nbsp;
                @foreach (var file in sub.ProjectDocuments)
                {
                    if (file.DocumentPath.ToUpper().Contains("PDFFILES"))
                    {
                        <a href="@file.DocumentPath">Link</a>
                    }
                    else
                    {
                        <img src="@file.DocumentPath" width="300px" />
                    }
                    <br />
                }
            </p>

        }
    }

    <EditForm Model="formsub">
        <h4>Create Project Sub</h4>
        <p style="background-color:white; border:solid">
            <br />
            &nbsp;<label>Project Sub Name :</label> &nbsp; <InputText id="SubName" @bind-Value="formsub.ProjectSubName"></InputText><br /><br />
            &nbsp;<label>Description :</label> &nbsp; <InputText id="SubDesc" @bind-Value="formsub.Description"></InputText><br /><br />
            &nbsp;<label>Remarked :</label> &nbsp; <InputText id="SubRemark" @bind-Value="formsub.Remark"></InputText><br /><br />
            &nbsp;<label>Budget :</label> &nbsp; <InputNumber id="SubBudget" @bind-Value="formsub.Budget"></InputNumber> THB <br /><br />
            &nbsp;<label>Started Date :</label> &nbsp; <InputDate id="SubStartDate" @bind-Value="formsub.PlanStartDate"></InputDate> &nbsp;&nbsp;&nbsp;
            &nbsp;<label>Finished Date :</label> &nbsp; <InputDate id="SubFinishDate" @bind-Value="formsub.PlanFinishDate"></InputDate>&nbsp;&nbsp;<br /><br />

            &nbsp;<label>RA Type :</label> &nbsp; <InputSelect id="SubRAType" @bind-Value="formRAType.RatypeMasterId">
                <option value="0">------------Select RA Type------------</option>
                @if (ratype is not null)
                {
                    foreach (var list in ratype)
                    {
                        <option value="@list.Id">@list.Name</option>
                    }
                }
            </InputSelect><br /><br />


        <p style="background-color:white; border:solid">
            &nbsp;<h4>Category</h4>
            <table style="width:100%">
                <tr>
                    <th>Category</th>
                    <th>Category Sub</th>
                    <th>Delete</th>
                </tr>
                    @if (ListCategory is not null)
                    {
                        foreach (var list in ListCategory)
                        {
                            var cate = category.Where(w => w.Id == list.CategoryCatId).FirstOrDefault();
                            <tr>
                            <td>@cate.CategoryCat</td>
                            <td>@list.CategoryCatSub</td>
                            <td>
                                <button @onclick="() => ListCategory.Remove(list)">X</button>
                            </td>
                        </tr>
                        }
                    }
            </table>
            <div>
                <InputSelect id="SubCategory" @bind-Value="categoryid">
                    <option value="0">------------Select Category------------</option>
                        @if (category is not null)
                        {
                            foreach (var list in category)
                            {
                                foreach (var sub in list.MasterCapabilityCatSubs)
                                {
                                    <option value="@sub.Id">@list.CategoryCat - @sub.CategoryCatSub</option>
                                }
                            }
                        }
                </InputSelect> &nbsp;&nbsp;
                <button @onclick="()=>SaveCategory(categoryid)">Add Category</button><br /><br />
            </div>
        </p>
        &nbsp;<InputFile OnChange="OnInputFileChange" />
        <br /><br />
        @if (uploadfile)
        {
            <button type="submit" @onclick="OnSubmit">Upload Selected File</button>
        }        
        <br /><br />
        &nbsp;<button @onclick="SaveProjectSub">Add</button>
        </p>
    </EditForm>
    <p>
        &nbsp;<button @onclick="SaveAll">Save All</button>
    </p>
    
}

@code {
    public ProjectHd formmain { get; set; } = new ProjectHd();
    public ProjectSubProjectTl formsub { get; set; } = new ProjectSubProjectTl();
    public ProjectRatypeTl formRAType { get; set; } = new ProjectRatypeTl();
    public List<Contact> ListContact { get; set; } = new List<Contact>();
    public List<MasterCapabilityCatSub> ListCategory { get; set; } = new List<MasterCapabilityCatSub>();
    public List<Member> ListCustomer { get; set; } = new List<Member>();
    public List<ProjectHdhistory> HDhis { get; set; } = new List<ProjectHdhistory>();
    public List<ProjectSubProjectTlhistory> Subhis { get; set; } = new List<ProjectSubProjectTlhistory>();

    private List<Contact> contact;
    private List<MasterCapabilityCat> category;
    private List<MasterCapabilityCat> sortedcategory;
    private List<RatypeMaster> ratype;
    private List<Member> member;
    private List<Member> customer;
    private List<MasterCapabilityCatSub> showcate;
    string mem = @"
[{
    id:'1',
    CompanyNameEN:'Ministry of public health',
    CompanyNameTH:'กระทรวงสาธารณสุข',
    //address:'ถนนติวานนท์ ต.ตลาดขวัญ อ.เมือง จ.นนทบุรี 11000',
    WebSite:'https://www.moph.go.th/',
    Email:'moph0200@saraban.mail.go.th',
    Telephone:'02-590-1000'
},
{
    id:'2',
    CompanyNameEN:'Busarakham Hospital',
    CompanyNameTH:'โรงพยาบาลบุษราคัม',
    //address:'อาคารอิมแพคชาเลนเจอร์ 2 Popular 1 Rd, Tambon Ban Mai, Amphoe Pak Kret, Chang Wat Nonthaburi 11120',
    WebSite:'',
    Email:'',
    Telephone:'02 029 1661'
},
{
    id:'3',
    CompanyNameEN:'Forth Corporation Public Company Limited',
    CompanyNameTH:'บริษัท ฟอร์ท คอร์ปอเรชั่น จำกัด (มหาชน)',
    //address:'1053/1 Phahonyothin Road, Phayathai, Phayathai, Bangkok 10400',
    WebSite:'https://www.forth.co.th/',
    Email:'',
    Telephone:''
}]
";
    string cont = @"
[{
    id:'1',
    FirstNameTH:'นิรุตต์ เฉลิมศรีเมือง',
    MobileNo:'02 029 1661'
},
{
    id:'2',
    FirstNameTH:'ธัญญารัตน์ วาวจันทึก',
    MobileNo:''
},
{
    id:'3',
    FirstNameTH:'ปนัสยา  ทองดี',
    MobileNo:'+66(0)2 117-4619'
}]
";

    int customerid;
    int contactid;
    int categoryid;

    private bool Subshow = false;
    private bool MainSaveshow = true;
    private bool uploadfile = true;

    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;

    protected override async Task OnInitializedAsync()
    {
        ratype = await pj.GetRAType();
        member = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Member>>(mem);
        customer = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Member>>(mem);
        contact = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Contact>>(cont);
        category = await pj.GetAllCapability();
        StateHasChanged();
    }

    void SaveContact(int id) //Add contact to Project HD 
    {
        var result = contact.Where(w => w.id == id.ToString()).FirstOrDefault();
        ListContact.Add(new Contact() { id = result.id , FirstNameTH = result.FirstNameTH , MobileNo = result.MobileNo });
    }

    void SaveCategory(int id) //Add category to Project Sub
    {
        foreach (var cate in category)
        {
            var sorted = cate.MasterCapabilityCatSubs.Where(w => w.Id == id).FirstOrDefault();
            if (sorted is not null)
            {
                ListCategory.Add(new MasterCapabilityCatSub() { Id = sorted.Id, CategoryCatId = sorted.CategoryCatId, CategoryCatSub = sorted.CategoryCatSub });
                return;
            }
        }
    }

    void SaveProjectMain() //Add data to Project HD List<>
    {
        HDSave();
        ListCustomer = new List<Member>();
        var result = customer.Where(c => c.id == customerid.ToString()).FirstOrDefault();
        ListCustomer.Add(new Member() { id = result.id, CompanyNameEN = result.CompanyNameEN, CompanyNameTH = result.CompanyNameTH, Email = result.Email, Telephone = result.Telephone, WebSite = result.WebSite });
        formmain.CustomerInfo = Newtonsoft.Json.JsonConvert.SerializeObject(ListCustomer);
        formmain.ContactInfo = Newtonsoft.Json.JsonConvert.SerializeObject(ListContact);
        formmain.ProjectHdstatus = "Open";
        formmain.Active = "Y";
        //formmain.CreateDated = DateTime.Now;
        formmain.ProjectHdhistories.Add(new ProjectHdhistory() { ProjectHdid = formmain.Id, Remark = "Create", EditorId = 1});
        formsub.ProjectHdid = formmain.Id;
        
        Showsub();
        formsub.ProjectSubName = formmain.ProjectName;
        formsub.Description = formmain.Description;
        formsub.Remark = formmain.Remark;
        formsub.Budget = formmain.Budget;
        formsub.PlanStartDate = formmain.PlanStartDate;
        formsub.PlanFinishDate = formmain.PlanFinishDate;
    }

    void SaveProjectSub() //Add data to Project Sub List<>
    {
        formRAType.MemberCapability = Newtonsoft.Json.JsonConvert.SerializeObject(ListCategory);
        formsub.ProjectRatypeTls.Add(formRAType);
        formsub.ProjectSubStatus = "Open";
        formsub.Active = "Y";
        //formsub.CreateDated = DateTime.Now;
        formsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = formsub.Id, Remark = "Create", EditorId = 1});
        formmain.ProjectSubProjectTls.Add(formsub);

        formsub = new ProjectSubProjectTl();
        formsub.ProjectHdid = formmain.Id;
        ListCategory = new List<MasterCapabilityCatSub>();

        uploadfile = true;
        this.StateHasChanged();
    }

    async void SaveAll()
    {
        var result = await pj.SaveProjectHD(formmain);
    }

    private void ShowCategory(string cate) //Get category from Project Sub List<> to json format and show in page
    {
        showcate = new List<MasterCapabilityCatSub>();
        showcate = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(cate);
    }

    private void Showsub() //After click next in Project HD show  Project sub area
    {
        Subshow = true;
    }

    private void HDSave() //After click next in Project HD hide button
    {
        MainSaveshow = false;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file selected";
        this.StateHasChanged();
    }

    private async void OnSubmit() //Upload file (image,pdf) to local folders
    {
        foreach (var file in selectedFiles)
        {
            Stream stream = file.OpenReadStream();
            string filename = formsub.ProjectSubRunNo + "_" + file.Name;
            string filetype = string.Empty;
            string filepath = string.Empty;
            if (file.Name.ToUpper().Contains("PDF"))
            {
                filetype = "\\PDFFiles\\" + filename;
                filepath = "/PDFFiles/" + filename;
            }
            else
            {
                filetype = "\\PicFiles\\" + filename;
                filepath = "/PicFiles/" + filename;
            }
            var path = $"{env.WebRootPath}{filetype}";
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();

            formsub.ProjectDocuments.Add(new ProjectDocument() { ProjectSubProjectTlid = formsub.Id, DocumentPath = filepath, Active = "Y", EditorId = 1 });
        }
        uploadfile = false;
        this.StateHasChanged();
    } 
}
