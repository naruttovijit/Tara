@page "/Data/ProjectSubEdit/{id:int}"

@implements IDisposable;

@using Data;
@using ModelM2s;
@using ModelM4s;

@inject ProjectData pj;
@inject IWebHostEnvironment env
@inject NavigationManager NavManager

<h3>Edit Project Sub</h3>

<EditForm Model="projectsub">
    <div class="container">
        <div class="row">
            <div class="col-2"><p><b>Project Sub Name :</b></p></div>
            <div class="col"><InputText style="width: 100%" id="SubName" @bind-Value="projectsub.ProjectSubName"></InputText></div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Description :</b></p></div>
            <div class="col"><InputText style="width: 100%" id="MainDesc" @bind-Value="projectsub.Description"></InputText></div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Remarked :</b></p></div>
            <div class="col"><InputText style="width: 100%" id="MainRemark" @bind-Value="projectsub.Remark"></InputText></div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Budget :</b></p></div>
            <div class="col"><InputNumber style="width: 100%" id="MainBudget" @bind-Value="projectsub.Budget"></InputNumber></div>
            <div class="col-1">THB</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Started Date :</b></p></div>
            <div class="col"><InputDate id="MainStartDate" @bind-Value="projectsub.PlanStartDate"></InputDate></div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Finished Date :</b></p></div>
            <div class="col"><InputDate id="MainFinishDate" @bind-Value="projectsub.PlanFinishDate"></InputDate></div>
        </div>
        @if (projectratype.Id > 0)
        {
            var list = ratype.Where(w => w.Id == projectratype.RatypeMasterId).FirstOrDefault();
            <div class="row">
                <div class="col-2"><p><b>Old RA Type :</b></p></div>
                <div class="col">@list.Name</div>
            </div>
        }
        <div class="row">
            <div class="col-2"><p><b>New RA Type :</b></p></div>
            <div class="col">
                <InputSelect id="SubRAType" @bind-Value="ratypeid">
                    <option value="0">------------Select RA Type------------</option>
                    @if (ratype is not null)
                    {
                        foreach (var list in ratype)
                        {
                            <option value="@list.Id">@list.Name</option>
                        }
                    }
                </InputSelect>
            </div>
        </div>
    </div>
    <br />

    <h4>Project Category</h4>
    <div class="container">
        <div class="row">
            <table class="table table-striped" style="background-color:white; border:solid">
                <thead>
                    <tr>
                        <th style="width: 45%">Category Name</th>
                        <th style="width: 45%">Category Sub Name</th>
                        <th style="width: 10%">Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @if (subcategory is not null)
                    {
                        foreach (var cat in subcategory)
                        {
                            var cate = category.Where(w => w.Id == cat.CategoryCatId).FirstOrDefault();
                            <tr>
                                <td>@cate.CategoryCat</td>
                                <td>@cat.CategoryCatSub</td>
                                <td class="text-center"><button @onclick="() => subcategory.Remove(cat)">X</button></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
       <div class="row">
           <div class="col-6">
                <InputSelect id="SubCategory" @bind-Value="categoryid">
                    <option value="0">------------Select Category------------</option>
                    @if (category is not null)
                    {
                        foreach (var list in category)
                        {
                            foreach (var sub in list.MasterCapabilityCatSubs)
                            {
                                <option value="@sub.Id">@list.CategoryCat - @sub.CategoryCatSub</option>
                            }
                        }
                    }
                </InputSelect>
           </div>
            <div class="col"><button @onclick="()=>SaveCategory(categoryid)">Add Category</button></div>
       </div>
    </div>
    <br />
    <br />

    <h4>Project Document</h4>
    <div class="container">
        <div class="row">
            <p>
                <table class="table table-striped" style="background-color:white; border:solid">
                    <thead>
                        <tr>
                            <th style="width: 50%">Document Name</th>
                            <th style="width: 40%">Description</th>
                            <th class="text-center" style="width: 10%">Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (showdoc is not null)
                        {
                            foreach (var doc in showdoc)
                            {
                                <tr>
                                    @if (doc.DocumentPath.ToUpper().Contains("PDFFILES"))
                                    {
                                        <td><a href="@doc.DocumentPath">Link</a></td>
                                    }
                                    else
                                    {
                                        <td><img src="@doc.DocumentPath" width="300px" /></td>
                                    }
                                    <td>@doc.Description</td>
                                    <td class="text-center"><button @onclick="() => showdoc.Remove(doc)">X</button></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </p>
        </div>
        <div class="row">
            <div class="col-5"><p><InputFile OnChange="OnInputFileChange"/></p></div>
        </div>
        <div class="row">
            <div class="col-2"><p>Document Description :</p></div>
            <div class="col"><InputText style="width: 100%" id="docdesc" @bind-Value="DocDesc"></InputText></div>
        </div>
        <div class="row">
            <p><button type="submit" @onclick="OnSubmit">Upload Selected File</button></p>
        </div>
    </div>
    <br />

    <div class="container">
        <button @onclick="UpdateProjectSub">Update</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }

    public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
    public ProjectRatypeTl projectratype { get; set; } = new ProjectRatypeTl();

    private List<ProjectDocument> projectdoc;
    private List<ProjectRatypeTl> projectra;
    private List<MasterCapabilityCat> category;
    private List<MasterCapabilityCatSub> subcategory;
    private List<ProjectDocument> showdoc;
    private List<RatypeMaster> ratype;

    int ratypeid;
    int categoryid;

    string Message = "No file(s) selected";
    string DocDesc;
    IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await Initial();
    }

    private async Task Initial()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        projectdoc = await pj.GetAllProjectDocument();
        projectra = await pj.GetAllProjectRAType();
        category = await pj.GetAllCapability();
        ratype = await pj.GetRAType();

        projectratype = projectra.Where(w => w.ProjectSubProjectTlid == id).FirstOrDefault();
        subcategory = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(projectratype.MemberCapability);
        showdoc = projectdoc.Where(w => w.ProjectSubProjectTlid == id).ToList();
        StateHasChanged();
    }

    void SaveCategory(int id) //Add category to Project Sub
    {
        foreach (var cate in category)
        {
            var sorted = cate.MasterCapabilityCatSubs.Where(w => w.Id == id).FirstOrDefault();
            if (sorted is not null)
            {
                subcategory.Add(new MasterCapabilityCatSub() { Id = sorted.Id, CategoryCatId = sorted.CategoryCatId, CategoryCatSub = sorted.CategoryCatSub });
                return;
            }
        }
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.GetMultipleFiles()[0];
        Message = $"{selectedFile.Name} ({selectedFile.Size} bytes) file selected";
        this.StateHasChanged();
    }

    private async void OnSubmit() //Upload file (image,pdf) to local folders
    {
        if (selectedFile != null)
        {
            Stream stream = selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 100);
            string filename = projectsub.ProjectSubRunNo + "_" + selectedFile.Name;
            string filetype = string.Empty;
            string filepath = string.Empty;
            if (selectedFile.Name.ToUpper().Contains("PDF"))
            {
                filetype = "\\PDFFiles\\" + filename;
                filepath = "/PDFFiles/" + filename;
            }
            else
            {
                filetype = "\\PicFiles\\" + filename;
                filepath = "/PicFiles/" + filename;
            }
            var path = $"{env.WebRootPath}{filetype}";
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();

            projectsub.ProjectDocuments.Add(new ProjectDocument() { ProjectSubProjectTlid = projectsub.Id, DocumentPath = filepath, Description = DocDesc, Active = "Y", EditorId = 1 });
            showdoc.Add(new ProjectDocument() { ProjectSubProjectTlid = projectsub.Id, DocumentPath = filepath, Description = DocDesc, Active = "Y", EditorId = 1 });
        }
        
        this.StateHasChanged();
    }

    async void UpdateProjectSub()
    {
        projectsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = projectsub.Id, Remark = "Update data", EditorId = 1 });
        var result = await pj.SaveSubProject(projectsub);
        NavManager.NavigateTo("/Data/ProjectSubDetail/{id:int}" + id);
    }

    public void Dispose()
    {
        Console.WriteLine("Disconnected");
    }
}
