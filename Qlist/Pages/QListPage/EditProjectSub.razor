@*@page "/Data/ProjectSubEdit/{id:int}"*@

@implements IDisposable;

@using Data;
@using ModelM2s;
@using ModelM4s;
@using Radzen;
@using Radzen.Blazor;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization;

@inject ProjectData pj;
@inject IWebHostEnvironment env
@inject NavigationManager NavManager
@inject DialogService DialogService
@inject BlazorSpinner.SpinnerService spin

@attribute [Authorize(Roles = "1,2")]

<br />
<h3>Edit Project Sub</h3>

<EditForm Model="projectsub">
    <ConcurrentComponent ModuleName="ProjectSubEdit" ObjId="projectsub.Id" UserId="userid"></ConcurrentComponent>
    <div class="card">
        <div class="card-header">Detail</div>
        <div class="card-body">
            <div class="row">
                <div class="col-2"><p><b>Project Sub Name</b> <a style="font-size:medium; color:red">*</a></p></div>
                <div class="col"><p><RadzenTextBox class="rz-border-danger" style="width: 100%" id="MainName" @bind-Value="projectsub.ProjectSubName" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Description</b></p></div>
                <div class="col"><p><RadzenTextArea style="width: 100%" id="MainDesc" @bind-Value="projectsub.Description" Cols="30" Rows="3" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Remark</b></p></div>
                <div class="col"><p><RadzenTextArea style="width: 100%" id="MainRemark" @bind-Value="projectsub.Remark" Cols="30" Rows="3" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Budget</b></p></div>
                <div class="col"><p><RadzenNumeric TValue="double?" Placeholder="0.0" Step="0.5" @bind-Value=@projectsub.Budget Class="w-100" /></p></div>
                <div class="col-1">THB</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Started Date</b></p></div>
                <div class="col-2">
                    <p>
                        <RadzenDatePicker @bind-Value=@projectsub.PlanStartDate DateFormat="dd/MM/yyyy" Class="w-100">
                            <FooterTemplate>
                                <RadzenButton Click=@OnTodayPlanStart Text="Today" Class="my-3 w-100" />
                            </FooterTemplate>
                        </RadzenDatePicker>
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Finished Date</b></p></div>
                <div class="col-2">
                    <p>
                        <RadzenDatePicker @bind-Value=@projectsub.PlanFinishDate DateFormat="dd/MM/yyyy" Class="w-100">
                            <FooterTemplate>
                                <RadzenButton Click=@OnTodayPlanFinish Text="Today" Class="my-3 w-100" />
                            </FooterTemplate>
                        </RadzenDatePicker>
                    </p>
                </div>
            </div>
            @if (projectratype.Id > 0)
            {
                var list = ratype.Where(w => w.Id == projectratype.RatypeMasterId).FirstOrDefault();
                <div class="row">
                    <div class="col-2"><p><b>Old RA Type</b></p></div>
                    <div class="col">@list.Name</div>
                </div>
            }
            <div class="row">
                <div class="col-2"><p><b>New RA Type</b></p></div>
                <div class="col-6">
                    @if (ratype is not null)
                    {
                        <p>
                            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@ratypeid Placeholder="Select..."
                                        Data=@ratype TextProperty="Name" ValueProperty="Id" Class="w-100" />
                        </p>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Capability</b> <a style="font-size:medium; color:red">*</a></p></div>
                <div class="col-6">
                    @if (subcap is not null)
                    {
                        <p>
                            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            @bind-Value=@multipleValues Multiple="true" Placeholder="Select..." Data=@subcap TextProperty="CategoryCatSub" ValueProperty="Id"
                                        Change=@(args => OnChange(args, "DropDown with multiple selection")) class="rz-border-danger" style="width: 100%">
                                <Template Context="cap">
                                                @getcap((cap.CategoryCatId)) - @(cap.CategoryCatSub)
                                            </Template>
                                    </RadzenDropDown>
                        </p>
                    }
                </div>
            </div>
        </div>
    </div>
    <br />

    <div class="card">
        <div class="card-header">Project Document</div>
        <div class="card-body">
            @if (projectdoc is not null)
            {
                foreach (var doc in projectdoc)
                {
                    string filename = string.Empty;
                    <div class="row">
                        @if (doc.DocumentPath.ToUpper().Contains("PDFFILES"))
                        {
                            filename = Path.GetFileName(doc.DocumentPath);
                            <div class="col"><a href="@doc.DocumentPath">@filename</a></div>
                        }
                        else
                        {
                            <div class="col"><img src="@doc.DocumentPath" width="300px" /></div>
                        }
                        <div class="col"><a style="white-space: pre-wrap;">@doc.Description</a></div>
                        <div class="col-1"><RadzenButton Click=@(args => RemoveFile(doc)) Icon="delete" ButtonStyle="ButtonStyle.Danger" /></div>
                    </div>
                }
            }

            <br />
            <div class="row">
                <div class="col-auto"><p><InputFile OnChange="OnInputFileChange" /><a style="color:red">Prefered file types : PDF, BMP, JPG, JPEG, PNG</a></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p>Document Description</p></div>
                <div class="col"><InputText style="width: 100%" id="docdesc" @bind-Value="DocDesc"></InputText></div>
            </div>
            <div class="row-cols-sm-auto">
                <p><RadzenButton Click=@(args => OnSubmit()) Text="Upload Selected File" ButtonStyle="ButtonStyle.Primary" /></p>
            </div>
        </div>
    </div>
    <br />

    <div class="card border-0">
        <div class="row-cols-sm-auto">
            <RadzenButton Click=@(args => UpdateProjectSub()) Icon="update" Text="Update" ButtonStyle="ButtonStyle.Success" />
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }

    public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
    public ProjectRatypeTl projectratype { get; set; } = new ProjectRatypeTl();

    private List<ProjectDocument> projectdoc;
    private List<MasterCapabilityCat> cap;
    private List<MasterCapabilityCatSub> subcap;
    private List<MasterCapabilityCatSub>? subcategory;
    private List<RatypeMaster> ratype;

    int ratypeid;
    int categoryid;

    string Message = "No file(s) selected";
    string DocDesc;
    string filepath = @"C:\Websites\Tara-Qlist\wwwroot";
    IBrowserFile selectedFile;

    string[] stringArray = { "PDF", "BMP", "JPG", "JPEG", "PNG" };
    IEnumerable<int> multipleValues = new int[] { };

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }

    int userrole;
    string usermemberno;
    int userid;

    protected override async Task OnInitializedAsync()
    {
        spin.Show();
        await base.OnInitializedAsync();
        await GetDataAuthen();
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        projectratype = await pj.GetProjectRATypeBySubProjectID(projectsub.Id);
        projectdoc = await pj.GetProjectDocumentByProjectSubID(projectsub.Id);
        cap = await pj.GetAllCapability();
        subcap = await pj.GetAllSubCapability();
        subcap = subcap.OrderBy(w => w.CategoryCatId).ToList();
        ratype = await pj.GetRATypeMaster();
        subcategory = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(projectratype.MemberCapability);
        foreach(var list in subcategory)
        {
            multipleValues = multipleValues.Append(list.Id);
        }
        StateHasChanged();
        spin.Hide();
    }

    async Task GetDataAuthen()
    {
        usermemberno = string.Empty;

        AuthenticationState authenticationState;
        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;
        var claim = this.AuthenticationStateUser.Claims.ToList();
        userrole = int.Parse(claim[1].Value);
        usermemberno = claim[2].Value;
        userid = int.Parse(claim[3].Value);
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.GetMultipleFiles()[0];
        Message = $"{selectedFile.Name} ({selectedFile.Size} bytes) file selected";
        this.StateHasChanged();
    }

    private async void OnSubmit() //Upload file (image,pdf) to local folders
    {
        if (selectedFile == null)
        {
            await ErrorMessage("Please select image");
            return;
        }

        string path = string.Empty;
        string filepath = string.Empty;
        string filetype = string.Empty;

        if (!stringArray.Any(selectedFile.Name.ToUpper().Contains))
        {
            await ErrorMessage("Upload files support files type (PDF, BMP, JPG, JPEG, PNG)");
            return;
        }

        if (selectedFile != null)
        {
            string filename = projectsub.ProjectSubRunNo + "_" + selectedFile.Name;
            filetype = string.Empty;
            filepath = string.Empty;
            if (selectedFile.Name.ToUpper().Contains("PDF"))
            {
                filetype = "\\PDFFiles\\" + filename;
                filepath = "/PDFFiles/" + filename;
            }
            else
            {
                filetype = "\\PicFiles\\" + filename;
                filepath = "/PicFiles/" + filename;
            }
            path = $"{env.WebRootPath}{filetype}";
        }

        if (!string.IsNullOrEmpty(path) && File.Exists(path))
        {
            await ErrorMessage("File name already exit !");
            return;
        }
        else
        {
            Stream stream = selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 100);
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();

            projectsub.ProjectDocuments.Add(new ProjectDocument() { ProjectSubProjectTlid = projectsub.Id, DocumentPath = filepath, Description = DocDesc, Active = "Y", EditorId = userid, Path = path });
            projectdoc.Add(new ProjectDocument() { ProjectSubProjectTlid = projectsub.Id, DocumentPath = filepath, Description = DocDesc, Active = "Y", EditorId = userid, Path = path  });
        }

        this.StateHasChanged();
    }

    async void UpdateProjectSub()
    {
        if (string.IsNullOrEmpty(projectsub.ProjectSubName))
        {
            await ErrorMessage("Please fill in Project Sub Name!");
            return;
        }
        if (subcategory.Count == 0)
        {
            await ErrorMessage("Please select Capability!");
            return;
        }

        if (ratypeid > 0)
        {
            projectratype.RatypeMasterId = ratypeid;
        }
        projectratype.MemberCapability = Newtonsoft.Json.JsonConvert.SerializeObject(subcategory);
        projectsub.ProjectRatypeTls.Add(projectratype);
        projectsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = projectsub.Id, Remark = "Update data", EditorId = userid });
        var result = await pj.SaveSubProject(projectsub);

        NavManager.NavigateTo("/Data/ProjectSubDetail/" + id);
    }

    void OnTodayPlanStart()
    {
        projectsub.PlanStartDate = DateTime.Now;
    }

    void OnTodayPlanFinish()
    {
        projectsub.PlanFinishDate = DateTime.Now;
    }

    private string getcap(int? id)
    {
        string get = string.Empty;
        var main = cap.Where(w => w.Id == id).FirstOrDefault();
        get = main.CategoryCat;
        return get;
    }

    async Task ErrorMessage(string message)
    {
        await DialogService.OpenAsync("Warning", ds =>
        @<div>
            @message
        </div>
    , new DialogOptions() { CloseDialogOnOverlayClick = true });
    }

    void OnChange(object value, string name)
    {
        subcategory = new List<MasterCapabilityCatSub>();
        foreach (var item in multipleValues)
        {
            var sub = subcap.Where(w => w.Id == item).FirstOrDefault();
            subcategory.Add(new MasterCapabilityCatSub() { Id = sub.Id, CategoryCatId = sub.CategoryCatId, CategoryCatSub = sub.CategoryCatSub, CategoryCat = sub.CategoryCat });
        }

    }

    private async void RemoveFile(ProjectDocument doc)
    {
        if (File.Exists(doc.Path))
        {
            File.Delete(doc.Path);
        }

        projectdoc.Remove(doc);

        foreach (ProjectDocument Doc in projectsub.ProjectDocuments)
        {
            if (Doc.DocumentPath == doc.DocumentPath)
            {
                projectsub.ProjectDocuments.Remove(Doc);
                break;
            }
        }

        if (doc.Id > 0)
        {
            await pj.DeleteDoc(doc.Id);
        }

        this.StateHasChanged();
    }

    public void Dispose()
    {
        if (projectdoc is not null) projectdoc.Clear();
        if (cap is not null) cap.Clear();
        if (subcap is not null) subcap.Clear();
        if (subcategory is not null) subcategory.Clear();
        if (ratype is not null) ratype.Clear();
        Console.WriteLine("Disconnected");
    }
}
