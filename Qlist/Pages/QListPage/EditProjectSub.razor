@page "/Data/ProjectSubEdit/{id:int}"

@using Data;
@using ModelM2s;
@using ModelM4s;

@inject ProjectData pj;
@inject IWebHostEnvironment env
@inject NavigationManager NavManager

<h3>Edit Project Sub</h3>

<EditForm Model="projectsub">
    &nbsp;<label>Project Sub Name :</label> &nbsp; <InputText id="SubName" @bind-Value="projectsub.ProjectSubName"></InputText><br /><br />
    &nbsp;<label>Description :</label> &nbsp; <InputText id="MainDesc" @bind-Value="projectsub.Description"></InputText><br /><br />
    &nbsp;<label>Remarked :</label> &nbsp; <InputText id="MainRemark" @bind-Value="projectsub.Remark"></InputText><br /><br />
    &nbsp;<label>Budget :</label> &nbsp; <InputNumber id="MainBudget" @bind-Value="projectsub.Budget"></InputNumber> THB <br /><br />
    &nbsp;<label>Started Date :</label> &nbsp; <InputDate id="MainStartDate" @bind-Value="projectsub.PlanStartDate"></InputDate> &nbsp;&nbsp;&nbsp;
    &nbsp;<label>Finished Date :</label> &nbsp; <InputDate id="MainFinishDate" @bind-Value="projectsub.PlanFinishDate"></InputDate><br /><br />
    @if (projectratype.Id > 0)
    {
        var list = ratype.Where(w => w.Id == projectratype.RatypeMasterId).FirstOrDefault();
        <label>Old RA Type : @list.Name</label>
        <br />
    }
    &nbsp;<label>New RA Type :</label> &nbsp; <InputSelect id="SubRAType" @bind-Value="ratypeid">
        <option value="0">------------Select RA Type------------</option>
        @if (ratype is not null)
        {
            foreach (var list in ratype)
            {
                <option value="@list.Id">@list.Name</option>
            }
        }
    </InputSelect><br /><br />

        <h4><b>Project Category</b></h4>
        <table class="table table-striped" style="background-color:white; border:solid">
            <thead>
                <tr>
                    <th>Category Name</th>
                    <th>Category Sub Name</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
            @if (subcategory is not null)
            {
                foreach (var cat in subcategory)
                {
                    var cate = category.Where(w => w.Id == cat.CategoryCatId).FirstOrDefault();
                    <tr>
                        <td>@cate.CategoryCat</td>
                        <td>@cat.CategoryCatSub</td>
                        <td>
                            <button @onclick="() => subcategory.Remove(cat)">X</button>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
        <div>
            <InputSelect id="SubCategory" @bind-Value="categoryid">
                <option value="0">------------Select Category------------</option>
                @if (category is not null)
                {
                    foreach (var list in category)
                    {
                        foreach (var sub in list.MasterCapabilityCatSubs)
                        {
                            <option value="@sub.Id">@list.CategoryCat - @sub.CategoryCatSub</option>
                        }
                    }
                }
            </InputSelect> &nbsp;&nbsp;
            <button @onclick="()=>SaveCategory(categoryid)">Add Category</button><br /><br />
        </div>

        <h4><b>Project Document</b></h4>
        <table class="table table-striped" style="background-color:white; border:solid">
            <thead>
                <tr>
                    <th>Document Name</th>
                    <th>Description</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
                @if (showdoc is not null)
                {
                    foreach (var doc in showdoc)
                    {
                        <tr>
                            @if (doc.DocumentPath.ToUpper().Contains("PDFFILES"))
                            {
                                <td>
                                    <a href="@doc.DocumentPath">Link</a>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <img src="@doc.DocumentPath" width="300px" />
                                </td>
                            }
                            <td>@doc.Description</td>
                            <td>
                                <button @onclick="() => showdoc.Remove(doc)">X</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

    &nbsp;<InputFile OnChange="OnInputFileChange" />
    &nbsp;<button type="submit" @onclick="OnSubmit">Upload Selected File</button>
    <br /><br />
    &nbsp;<button @onclick="UpdateProjectSub">Update</button>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }

    public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
    public ProjectRatypeTl projectratype { get; set; } = new ProjectRatypeTl();

    private List<ProjectDocument> projectdoc;
    private List<ProjectRatypeTl> projectra;
    private List<MasterCapabilityCat> category;
    private List<MasterCapabilityCatSub> subcategory;
    private List<ProjectDocument> showdoc;
    private List<RatypeMaster> ratype;

    int ratypeid;
    int categoryid;

    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;

    protected override async Task OnInitializedAsync()
    {
        await Initial();
    }

    private async Task Initial()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        projectdoc = await pj.GetAllProjectDocument();
        projectra = await pj.GetAllProjectRAType();
        category = await pj.GetAllCapability();
        ratype = await pj.GetRAType();

        projectratype = projectra.Where(w => w.ProjectSubProjectTlid == id).FirstOrDefault();
        subcategory = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(projectratype.MemberCapability);
        showdoc = projectdoc.Where(w => w.ProjectSubProjectTlid == id).ToList();
        StateHasChanged();
    }

    void SaveCategory(int id) //Add category to Project Sub
    {
        foreach (var cate in category)
        {
            var sorted = cate.MasterCapabilityCatSubs.Where(w => w.Id == id).FirstOrDefault();
            if (sorted is not null)
            {
                subcategory.Add(new MasterCapabilityCatSub() { Id = sorted.Id, CategoryCatId = sorted.CategoryCatId, CategoryCatSub = sorted.CategoryCatSub });
                return;
            }
        }
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file selected";
        this.StateHasChanged();
    }

    private async void OnSubmit() //Upload file (image,pdf) to local folders
    {
        foreach (var file in selectedFiles)
        {
            Stream stream = file.OpenReadStream();
            string filename = projectsub.ProjectSubRunNo + "_" + file.Name;
            string filetype = string.Empty;
            string filepath = string.Empty;
            if (file.Name.ToUpper().Contains("PDF"))
            {
                filetype = "\\PDFFiles\\" + filename;
                filepath = "/PDFFiles/" + filename;
            }
            else
            {
                filetype = "\\PicFiles\\" + filename;
                filepath = "/PicFiles/" + filename;
            }
            var path = $"{env.WebRootPath}{filetype}";
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();

            projectsub.ProjectDocuments.Add(new ProjectDocument() { ProjectSubProjectTlid = projectsub.Id, DocumentPath = filepath, Active = "Y", EditorId = 1 });
        }
        this.StateHasChanged();
    }

    async void UpdateProjectSub()
    {
        projectsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = projectsub.Id, Remark = "Update data", EditorId = 1 });
        var result = await pj.SaveSubProject(projectsub);
        NavManager.NavigateTo("/Data/ProjectSubDetail/{id:int}" + id);
    }
}
