@page "/Data/ProjectSubDetail/{id:int}"

@using Data;
@using ModelM2s;
@using ModelM4s;
@using System.Globalization;
@using Radzen;
@using Radzen.Blazor;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@inject ProjectData pj;
@inject NavigationManager NavManager
@inject DialogService DialogService
@inject BlazorSpinner.SpinnerService spin
@implements IDisposable


@attribute [Authorize(Roles = "1,2,3")]

<br />
<h3>Project Sub Details</h3>
<br />

<div class="card" >
    <div class="card-header">
        <div class="row">
            <div class="col-sm-8">
                <b>Running Number : </b>@projectsub.ProjectSubRunNo
            </div>
            <div class="col-sm-4">
                @if (projectsub.ProjectSubMemberAsgmts.Count == 0 && userrole < 3)
                {
                    <RadzenButton Click=@(args => GoEdit()) Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Text="EDIT" style="float:right" />
                }
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-2"><p><b>Project Sub Name</b></p></div>
            <div class="col">@projectsub.ProjectSubName</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Description</b></p></div>
            <div class="col"><a style="white-space: pre-wrap;">@projectsub.Description</a></div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Remark</b></p></div>
            <div class="col"><a style="white-space: pre-wrap;">@projectsub.Remark</a></div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Budget</b></p></div>
            @if (string.IsNullOrEmpty(projectsub.Budget.ToString()))
            {
                <div class="col">@String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", 0)</div>
            }
            else
            {
                <div class="col">@String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", projectsub.Budget)</div>
            }
        </div>
        <div class="row">
            <div class="col-2"><p><b>Status</b></p></div>
            <div class="col">@projectsub.ProjectSubStatus</div>
            <div class="col-3">
                
            </div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Started Date</b></p></div>
            @if (string.IsNullOrEmpty(projectsub.PlanStartDate.ToString()))
            {
                <div class="col">Not Planed</div>
            }
            else
            {
                <div class="col">@projectsub.PlanStartDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</div>
            }
        </div>
        <div class="row">
            <div class="col-2"><p><b>Finished Date</b></p></div>
            @if (string.IsNullOrEmpty(projectsub.PlanFinishDate.ToString()))
            {
                <div class="col">Not Planed</div>
            }
            else
            {
                <div class="col">@projectsub.PlanFinishDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</div>
            }
        </div>
        <div class="row">
            <div class="col-2"><p><b>RA Type</b></p></div>
            <div class="col">@Selectratype</div>
        </div>
    </div>
</div>
<br />
<div class="card">
    <div class="card-header">
        Project Category
    </div>


    <div class="card-body">
        @if (subcapability is null || subcapability.Count == 0)
        {
            <div class="row"><p><em>No Capability</em></p></div>
        }
        else
        {
            @foreach (var cat in subcapability)
            {
                var cate = capability.Where(w => w.Id == cat.CategoryCatId).FirstOrDefault();
                <div class="row">
                    <div class="col"><li>@cate.CategoryCat - @cat.CategoryCatSub</li></div>
                </div>
            }
        }
    </div>
</div>
<br />
<div class="card">
    <div class="card-header">
        Project Document
    </div>
    <div class="card-body">
        @if (projectdoc is null || projectdoc.Count == 0)
        {
            <div class="row"><p><em>No Document</em></p></div>
        }
        else
        {
            @foreach (var doc in projectdoc)
            {
                string filename = string.Empty;
                <div class="row">
                    @if (doc.DocumentPath.ToUpper().Contains("PDFFILES"))
                    {
                        filename = Path.GetFileName(doc.DocumentPath);
                        <div class="col"><a href="@doc.DocumentPath">@filename</a></div>
                    }
                    else
                    {
                        <div class="col"><img src="@doc.DocumentPath" width="300px" /></div>
                    }
                    <div class="col"><a style="white-space: pre-wrap;">@doc.Description</a></div>
                </div>
            }
        }
    </div>
</div>
<br />
 <div class="card">
     <div class="card-header">
         <div class="row">
             <div class="col">
                 Membership Assignments
             </div>
            @if (hide && userrole < 3 && !listevent)
            {
                <div class="col-sm-auto">
                    <RadzenButton Text="Cancel Awarded" Icon="cancel" ButtonStyle="ButtonStyle.Danger" Click=@(args => DialogService.Confirm("Do you want to cancel Member Awarded?", "Cancel Member Awarded", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" })) />
                </div>
            }
         </div>
        
     </div>
     <div class="card-body">

         @if (projectsub.ProjectSubMemberAsgmts is not null)
         {
             if (projectsub.ProjectSubMemberAsgmts.Count == 0)
             {
                 <div class="row">
                    <p><em>No Membership Assignments</em></p>
                 </div>
             }
             else
             {
                 foreach (var list in projectsub.ProjectSubMemberAsgmts)
                 {
                    var member = selectmember.Where(w => w.Id == list.MemberId).FirstOrDefault();
                    if (list.Awarded == "Y")
                    {
                        <RadzenCard class="rz-background-color-success-lighter">
                            <div class="row">
                                <div class="col-2"><p>Thai Name :</p></div>
                                <div class="col">@member.CompanyNameTh</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>English Name :</p></div>
                                <div class="col">@member.CompanyNameEn</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>Telephone :</p></div>
                                <div class="col">@member.Telephone</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>Date Confirmed :</p></div>
                                <div class="col">@list.DateConfirm</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>Awarded :</p></div>
                                <div class="col">Yes</div>
                            </div>
                        </RadzenCard>
                        <br />
                    }
                    else
                    {
                        <RadzenCard class="rz-background-color-base-100">
                            <div class="row">
                                <div class="col-2"><p>Thai Name :</p></div>
                                <div class="col">@member.CompanyNameTh</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>English Name :</p></div>
                                <div class="col">@member.CompanyNameEn</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>Telephone :</p></div>
                                <div class="col">@member.Telephone</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>Date Confirmed :</p></div>
                                <div class="col">@list.DateConfirm</div>
                            </div>
                        </RadzenCard>
                        <br />
                    }

                }
             }

             if (!hide && userrole < 3)
             {
                 <div class="row-cols-sm-auto">
                    <RadzenButton Click=@(args => UpdateAssignment()) Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Text="ADD MEMBER" />
                </div>
             }
         }
     </div>
 </div>
 <br />
 <div class="card">
     <div class="card-header">Event</div>
     <div class="card-body">
        <div class="row">
            <p>
                <RadzenDataGrid PageSize="5" AllowPaging="true" AllowSorting="true" Data="@eve" TItem="Event" ColumnWidth="20%" GridLines="DataGridGridLines.Horizontal" class="border-0">
                    <Columns>
                        <RadzenDataGridColumn TItem="Event" Property="TargetDate" Title="Target Date" FormatString="{0:dd/MM/yyyy}" Width="15%" />
                        <RadzenDataGridColumn TItem="Event" Property="Description" Title="Description" Width="65%">
                            <Template Context="desc">
                                <a style="white-space: pre-wrap;">@desc.Description</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Event" Property="Status" Title="Status" Width="20%" />
                    </Columns>
                </RadzenDataGrid>
            </p>
        </div>
        <div class="row">
            @if (hide && userrole < 3)
                {
                    <div class="col-10"><RadzenButton Shade="Shade.Light" Click=@(args => UpdateProgress()) Icon="update" Text="Update Event" ButtonStyle="ButtonStyle.Primary" style="float:center" /></div>
                }
        </div>
    </div>
 </div>
 <br />

@code {
    [Parameter]
    public int id { get; set; }

    public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
    public ProjectRatypeTl projectra { get; set; } = new ProjectRatypeTl();

    private List<MasterCapabilityCatSub> subcapability;
    private List<MasterCapabilityCat> capability;
    private List<ProjectDocument> projectdoc;
    private List<RatypeMaster> ratype;
    private List<MemberMaster> selectmember;
    private List<Event> eve;

    bool hide = false;
    bool listevent = false;
    private string Selectratype;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }

    int userrole;
    string usermemberno;
    int userid;

    protected override async Task OnInitializedAsync()
    {
        spin.Show();
        await base.OnInitializedAsync();
        await Initial();
        DialogService.OnOpen +=  Open;
        DialogService.OnClose += Close;
        StateHasChanged();
        spin.Hide();
    }

    async Task Initial()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        await GetMemberData();
        projectdoc = await pj.GetProjectDocumentByProjectSubID(projectsub.Id);
        ratype = await pj.GetRATypeMaster();
        projectra = await pj.GetProjectRATypeBySubProjectID(projectsub.Id);
        eve = await pj.GetEventbySubProjectID(projectsub.Id);

        if (eve != null && eve.Count() > 0)
        {
            listevent = true;
        }

        if (projectra is not null)
        {
            var list = ratype.Where(w => w.Id == projectra.RatypeMasterId).FirstOrDefault();
            Selectratype = list.Name;
        }

        capability = await pj.GetAllCapability();
        subcapability = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(projectra.MemberCapability);

        await checkProgress();
    }

    async Task GetMemberData()
    {
        selectmember = new List<MemberMaster>();
        foreach (var list in projectsub.ProjectSubMemberAsgmts)
        {
            var select = await pj.GetMemberByID(list.MemberId);
            selectmember.Add(new MemberMaster()
                {
                    Id = select.Id,
                    CreateDate = select.CreateDate,
                    MemberNo = select.MemberNo,
                    MemberType = select.MemberType,
                    CompanyNameTh = select.CompanyNameTh,
                    CompanyNameEn = select.CompanyNameEn,
                    CompanyRegistrationNo = select.CompanyRegistrationNo,
                    RegisterCapital = select.RegisterCapital,
                    ThaiCapitalPercentage = select.ThaiCapitalPercentage,
                    EstablishYear = select.EstablishYear,
                    FixedAsset = select.FixedAsset,
                    NumberofEmployee = select.NumberofEmployee,
                    Telephone = select.Telephone,
                    Email = select.Email,
                    WebSite = select.WebSite,
                    Facebook = select.Facebook,
                    IsBoi = select.IsBoi,
                    IsCoreMember = select.IsCoreMember,
                    IsEnable = select.IsEnable,
                    ExpiredDate = select.ExpiredDate
                });
        }
    }

    async Task GetDataAuthen()
    {
        usermemberno = string.Empty;

        AuthenticationState authenticationState;
        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;
        var claim = this.AuthenticationStateUser.Claims.ToList();
        userrole = int.Parse(claim[1].Value);
        usermemberno = claim[2].Value;
        userid = int.Parse(claim[3].Value);
    }

    async Task checkProgress()
    {
        var list = projectsub.ProjectSubMemberAsgmts.Where(w => w.Awarded == "Y").FirstOrDefault();
        if (list is not null)
        {
            hide = true;
        }
    }

    private void UpdateAssignment()
    {
        NavManager.NavigateTo("/Data/MemberAssign/" + id.ToString());
    }

    private void UpdateProgress()
    {
        NavManager.NavigateTo("/Data/ProjectSubEvent/" + id.ToString());
    }

    private void GoEdit()
    {
        NavManager.NavigateTo("/Data/ProjectSubEdit/" + id.ToString());
    }

    private void Goback()
    {
        NavManager.NavigateTo("/Data/ProjectDetail/" + projectsub.ProjectHdid.ToString());
    }

    private void Gomain()
    {
        NavManager.NavigateTo("/Data/Project");
    }

    async void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
    }

    void Close(dynamic result)
    {
        if(result)
        {
            InvokeAsync(async () =>
            {
                var member = projectsub.ProjectSubMemberAsgmts.Where(w => w.Awarded == "Y").FirstOrDefault();
                var list = member.MemberAsgmtawardedHistories.FirstOrDefault();
                if (list is not null)
                {
                    var res = pj.DeleteAwarded(list.Id);
                    member.MemberAsgmtawardedHistories.Remove(list);
                }

                member.Awarded = null;
                projectsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = projectsub.Id, Remark = "Cancel Member Awarded", EditorId = userid });
                projectsub.ProjectSubStatus = "Cancel Member Awarded";
                var res2 = pj.SaveSubProject(projectsub);
                hide = false;
                await BusyDialog("Working ...");
                await Task.Delay(2000);

                // Close the dialog
                DialogService.Close();
                await Initial();
            });
        }
    }

    async Task BusyDialog(string message)
    {
        await DialogService.OpenAsync("", ds =>
        {
            RenderFragment content = b =>
            {
                b.OpenElement(0, "div");
                b.AddAttribute(1, "class", "row");

                b.OpenElement(2, "div");
                b.AddAttribute(3, "class", "col-md-12");

                b.AddContent(4, message);

                b.CloseElement();
                b.CloseElement();
            };
            return content;
        }, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }
}    