@page "/Data/ProjectSubDetail/{id:int}"

@implements IDisposable;

@using Data;
@using ModelM2s;
@using ModelM4s;
@using System.Globalization;
@using Radzen;
@using Radzen.Blazor;

@inject ProjectData pj;
@inject NavigationManager NavManager

@attribute [Authorize(Roles = "1,2,3")]

<br />
<h3>Project Sub Details</h3>
<br />

<div class="card" >
    <div class="card-header">
        <div class="row">
            <div class="col-sm-8">
                <b>Running Number : </b>@projectsub.ProjectSubRunNo
            </div>
            <div class="col-sm-4">
                @if (projectsub.ProjectSubMemberAsgmts.Count == 0)
                {
                    <RadzenButton Click=@(args => GoEdit()) Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Text="EDIT" style="float:right" />
                }
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-2"><p><b>Project Sub Name</b></p></div>
            <div class="col">@projectsub.ProjectSubName</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Description</b></p></div>
            <div class="col"><a style="white-space: pre-wrap;">@projectsub.Description</a></div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Remark</b></p></div>
            <div class="col"><a style="white-space: pre-wrap;">@projectsub.Remark</a></div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Budget</b></p></div>
            @if (string.IsNullOrEmpty(projectsub.Budget.ToString()))
            {
                <div class="col">@String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", 0)</div>
            }
            else
            {
                <div class="col">@String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", projectsub.Budget)</div>
            }
        </div>
        <div class="row">
            <div class="col-2"><p><b>Status</b></p></div>
            <div class="col">@projectsub.ProjectSubStatus</div>
            <div class="col-3">
                @if (hide)
                {
                    <div class="col-10"><RadzenButton Shade="Shade.Light" Click=@(args => UpdateProgress()) Icon="update" Text="Update Progress" ButtonStyle="ButtonStyle.Primary" style="float:right" /></div>
                }
            </div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Started Date</b></p></div>
            @if (string.IsNullOrEmpty(projectsub.PlanStartDate.ToString()))
            {
                <div class="col">Not Planed</div>
            }
            else
            {
                <div class="col">@projectsub.PlanStartDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</div>
            }
        </div>
        <div class="row">
            <div class="col-2"><p><b>Finished Date</b></p></div>
            @if (string.IsNullOrEmpty(projectsub.PlanFinishDate.ToString()))
            {
                <div class="col">Not Planed</div>
            }
            else
            {
                <div class="col">@projectsub.PlanFinishDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</div>
            }
        </div>
        <div class="row">
            <div class="col-2"><p><b>RA Type</b></p></div>
            <div class="col">@Selectratype</div>
        </div>
    </div>
</div>
<br />
<div class="card">
    <div class="card-header">
        Project Category
    </div>


    <div class="card-body">
        @if (subcapability is null || subcapability.Count == 0)
        {
            <div class="row"><p><em>No Capability</em></p></div>
        }
        else
        {
            @foreach (var cat in subcapability)
            {
                var cate = capability.Where(w => w.Id == cat.CategoryCatId).FirstOrDefault();
                <div class="row">
                    <div class="col">@cate.CategoryCat - @cat.CategoryCatSub</div>
                </div>
            }
        }
    </div>
</div>
<br />
<div class="card">
    <div class="card-header">
        Project Document
    </div>
    <div class="card-body">
        @if (projectdoc is null || projectdoc.Count == 0)
        {
            <div class="row"><p><em>No Document</em></p></div>
        }
        else
        {
            @foreach (var doc in projectdoc)
            {
                string filename = string.Empty;
                <div class="row">
                    @if (doc.DocumentPath.ToUpper().Contains("PDFFILES"))
                    {
                        filename = Path.GetFileName(doc.DocumentPath);
                        <div class="col"><a href="@doc.DocumentPath">@filename</a></div>
                    }
                    else
                    {
                        <div class="col"><img src="@doc.DocumentPath" width="300px" /></div>
                    }
                    <div class="col"><a style="white-space: pre-wrap;">@doc.Description</a></div>
                </div>
            }
        }
    </div>
</div>
<br />
 <div class="card">
     <div class="card-header">
         Membership Assignments
     </div>
     <div class="card-body">

         @if (projectsub.ProjectSubMemberAsgmts is not null)
         {
             if (projectsub.ProjectSubMemberAsgmts.Count == 0)
             {
                 <div class="row">
                    <p><em>No Membership Assignments</em></p>
                 </div>
             }
             else
             {
                 foreach (var list in projectsub.ProjectSubMemberAsgmts)
                 {
                    var member = selectmember.Where(w => w.Id == list.Id).FirstOrDefault();
                    if (list.Awarded == "Y")
                    {
                        <RadzenCard class="rz-background-color-success-light">
                            <div class="row">
                                <div class="col-2"><p>Thai Name :</p></div>
                                <div class="col">@member.CompanyNameTh</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>English Name :</p></div>
                                <div class="col">@member.CompanyNameEn</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>Telephone :</p></div>
                                <div class="col">@member.Telephone</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>Date Confirmed :</p></div>
                                <div class="col">@list.DateConfirm</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>Awarded :</p></div>
                                <div class="col">Yes</div>
                            </div>
                        </RadzenCard>
                        <br />
                    }
                    else
                    {
                        <RadzenCard class="rz-background-color-base-100">
                            <div class="row">
                                <div class="col-2"><p>Thai Name :</p></div>
                                <div class="col">@member.CompanyNameTh</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>English Name :</p></div>
                                <div class="col">@member.CompanyNameEn</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>Telephone :</p></div>
                                <div class="col">@member.Telephone</div>
                            </div>
                            <div class="row">
                                <div class="col-2"><p>Date Confirmed :</p></div>
                                <div class="col">@list.DateConfirm</div>
                            </div>
                        </RadzenCard>
                        <br />
                    }

                }
             }

             if (!hide)
             {
                 <div class="row-cols-4">
                    <RadzenButton Click=@(args => UpdateAssignment()) Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Text="ADD MEMBER ASSIGNMENTS" />
                </div>
             }
         }
     </div>
 </div>
 <br />


    @code {
        [Parameter]
        public int id { get; set; }

        public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
        public ProjectRatypeTl projectra { get; set; } = new ProjectRatypeTl();

        private List<MasterCapabilityCatSub> subcapability;
        private List<MasterCapabilityCat> capability;
        private List<ProjectDocument> projectdoc;
        private List<RatypeMaster> ratype;
        private List<MemberMaster> selectmember;

        bool hide = false;
        private string Selectratype;

        protected override async Task OnInitializedAsync()
        {
            await base.OnInitializedAsync();
            projectsub = await pj.GetProjectSubProjectTLbyID(id);
            await GetMemberData();
            projectdoc = await pj.GetProjectDocumentByProjectSubID(projectsub.Id);
            ratype = await pj.GetRATypeMaster();
            projectra = await pj.GetProjectRATypeBySubProjectID(projectsub.Id);
            if (projectra is not null)
            {
                var list = ratype.Where(w => w.Id == projectra.RatypeMasterId).FirstOrDefault();
                Selectratype = list.Name;
            }

            capability = await pj.GetAllCapability();
            subcapability = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(projectra.MemberCapability);

            await checkProgress();
            StateHasChanged();
        }

        async Task GetMemberData()
        {
            selectmember = new List<MemberMaster>();
            foreach (var list in projectsub.ProjectSubMemberAsgmts)
            {
                var select = await pj.GetMemberByID(list.Id);
                selectmember.Add(new MemberMaster()
                {
                    Id = select.Id,
                    CreateDate = select.CreateDate,
                    MemberNo = select.MemberNo,
                    MemberType = select.MemberType,
                    CompanyNameTh = select.CompanyNameTh,
                    CompanyNameEn = select.CompanyNameEn,
                    CompanyRegistrationNo = select.CompanyRegistrationNo,
                    RegisterCapital = select.RegisterCapital,
                    ThaiCapitalPercentage = select.ThaiCapitalPercentage,
                    EstablishYear = select.EstablishYear,
                    FixedAsset = select.FixedAsset,
                    NumberofEmployee = select.NumberofEmployee,
                    Telephone = select.Telephone,
                    Email = select.Email,
                    WebSite = select.WebSite,
                    Facebook = select.Facebook,
                    IsBoi = select.IsBoi,
                    IsCoreMemeber = select.IsCoreMemeber,
                    IsEnable = select.IsEnable,
                    ExpiredDate = select.ExpiredDate
                });
            }
        }

        async Task checkProgress()
        {
            foreach (var list in projectsub.ProjectSubMemberAsgmts)
            {
                if (list.Awarded == "Y")
                {
                hide = true;
                    return;
                }
            }
        }

        private void UpdateAssignment()
        {
            NavManager.NavigateTo("/Data/MemberAssign/" + id.ToString());
        }

        private void UpdateProgress()
        {
            NavManager.NavigateTo("/Data/ProjectSubProgress/" + id.ToString());
        }

        private void GoEdit()
        {
            NavManager.NavigateTo("/Data/ProjectSubEdit/" + id.ToString());
        }

        private void Goback()
        {
            NavManager.NavigateTo("/Data/ProjectDetail/" + projectsub.ProjectHdid.ToString());
        }

        private void Gomain()
        {
            NavManager.NavigateTo("/Data/Project");
        }

        public void Dispose()
        {
            if (subcapability is not null) subcapability.Clear();
            if (capability is not null) capability.Clear();
            if (projectdoc is not null) projectdoc.Clear();
            Console.WriteLine("Disconnected");
        }
    }