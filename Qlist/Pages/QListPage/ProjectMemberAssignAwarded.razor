@page "/Data/ProjectMemberAssignAwarded/{id:int}"

@implements IDisposable;

@using Data;
@using ModelM2s;
@using ModelM4s;

@inject ProjectData pj;
@inject NavigationManager NavManager

<h3>Project Sub Detail</h3>

@if (awarded.Id > 0)
{
    <div class="container">
        <div class="row">
            <div class="col-2"><p><b>Running Number :</b></p></div>
            <div class="col">@awarded.ProjectSubProjectTl.ProjectSubRunNo</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Project Sub Name :</b></p></div>
            <div class="col">@awarded.ProjectSubProjectTl.ProjectSubName</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Description :</b></p></div>
            <div class="col">@awarded.ProjectSubProjectTl.Description</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Remarked :</b></p></div>
            <div class="col">@awarded.ProjectSubProjectTl.Remark</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Budget :</b></p></div>
            @if (string.IsNullOrEmpty(awarded.ProjectSubProjectTl.Budget.ToString()))
            {
                <div class="col">0 THB</div>
            }
            else
            {
                <div class="col">@awarded.ProjectSubProjectTl.Budget THB</div>
            }
        </div>
        <div class="row">
            <div class="col-2"><p><b>Status :</b></p></div>
            <div class="col">@awarded.ProjectSubProjectTl.ProjectSubStatus</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Started Date :</b></p></div>
            @if (string.IsNullOrEmpty(awarded.ProjectSubProjectTl.PlanStartDate.ToString()))
            {
                <div class="col">Not Planed</div>
            }
            else
            {
                <div class="col">@awarded.ProjectSubProjectTl.PlanStartDate</div>
            }
        </div>
        <div class="row">
            <div class="col-2"><p><b>Finished Date :</b></p></div>
            @if (string.IsNullOrEmpty(awarded.ProjectSubProjectTl.PlanFinishDate.ToString()))
            {
                <div class="col">Not Planed</div>
            }
            else
            {
                <div class="col">@awarded.ProjectSubProjectTl.PlanFinishDate</div>
            }
        </div>
    </div>
}
<br />

<h3>Member Assignment</h3>

@if(awarded.MemberId > 0)
{
    var item = member.Where(w => w.Id == awarded.MemberId).FirstOrDefault();
    <div class="container">
        <div class="row">
            <div class="col-2"><p><b>Company Name TH :</b></p></div>
            <div class="col">@item.CompanyNameTh</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Company Name EN :</b></p></div>
            <div class="col">@item.CompanyNameEn</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Telephone :</b></p></div>
            <div class="col">@item.Telephone</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Email :</b></p></div>
            <div class="col">@item.Email</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Website :</b></p></div>
            <div class="col">@item.WebSite</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Facebook :</b></p></div>
            <div class="col">@item.Facebook</div>
        </div>
    </div>
}

@if (awarded.Awarded == "Y")
{

}
else
{
    <div class="container">
        <div class="row">
            <p>Is Awarded ?</p>
        </div>
        <div class="row">
            <button @onclick="()=>UpdateAwarded()">Yes</button>
            <button @onclick="()=>GoBack()">No</button>
        </div>
    </div>
}
<br />


@code {
    [Parameter]
    public int id { get; set; }

    public ProjectSubMemberAsgmt awarded { get; set; } = new ProjectSubMemberAsgmt();
    public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
    public ProjectHd projecthd { get; set; } = new ProjectHd();
    private List<MemberMaster> member;


    protected override async Task OnInitializedAsync()
    {
        await Initial();
    }
    private async Task Initial()
    {
        awarded = await pj.GetMemberAssign(id);
        member = await pj.GetAllMember();
        StateHasChanged();
    }

    async void UpdateAwarded()
    {
        int hiscount = awarded.MemberAsgmtawardedHistories.Count;
        if (hiscount < 1)
        {
            awarded.Awarded = "Y";
            awarded.ProjectSubProjectTl.ProjectSubStatus = "Member Assignments Awarded";
            awarded.MemberAsgmtawardedHistories.Add(new MemberAsgmtawardedHistory() { MemberAssignmentId = awarded.MemberId, DateAwarded = DateTime.Now, Active = "Y", LastUpdated = DateTime.Now, EditorId = 1 });
            awarded.ProjectSubProjectTl.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = awarded.ProjectSubProjectTlid, Remark = "Member Assignments Awarded", EditorId = 1 });
            var result = await pj.SaveMemberAssign(awarded);

            NavManager.NavigateTo("/Data/MemberAssign/" + awarded.ProjectSubProjectTlid.ToString());
        }
    }

    async void UpdateProjectHD()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(awarded.ProjectSubProjectTlid);
        projecthd = await pj.GetProjectHDbyID(projectsub.ProjectHdid);
        int subcount = projecthd.ProjectSubProjectTls.Count;
        int award = 0;
        foreach (var list in projecthd.ProjectSubProjectTls)
        {
            if (list.ProjectSubStatus == "Member Assignments Awarded") award++;
        }

        if (subcount == award)
        {
            projecthd.ProjectHdhistories.Add(new ProjectHdhistory() { ProjectHdid = projecthd.Id, Remark = "Member Assignments Awarded", TimeStamp = DateTime.Now, EditorId = 1 });
            projecthd.ProjectHdstatus = "Member Assignments Awarded";
            var result = await pj.SaveProjectHD(projecthd);
            NavManager.NavigateTo("/Data/MemberAssign/" + awarded.ProjectSubProjectTlid.ToString());
        }
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/Data/MemberAssign/" + awarded.ProjectSubProjectTlid.ToString());
    }

    public void Dispose()
    {
        Console.WriteLine("Disconnected");
    }
}
