@page "/Data/ProjectMemberAssignAwarded/{id:int}"

@implements IDisposable;

@using Data;
@using ModelM2s;
@using ModelM4s;
@using System.Globalization;
@using Radzen;
@using Radzen.Blazor;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@inject ProjectData pj;
@inject NavigationManager NavManager

<br />
<h3>Project Sub Member Assignment Awarded</h3>
<br />

@if (awarded.Id > 0)
{
    <ConcurrentComponent ModuleName="ProjectMemberAssignAwarded" ObjId="awarded.ProjectSubProjectTl.Id" UserId="userid"></ConcurrentComponent>
    <RadzenFieldset Text="Detail">
        <div class="container">
            <div class="row">
                <div class="col-2"><p><b>Running Number</b></p></div>
                <div class="col">@awarded.ProjectSubProjectTl.ProjectSubRunNo</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Project Sub Name</b></p></div>
                <div class="col">@awarded.ProjectSubProjectTl.ProjectSubName</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Description</b></p></div>
                <div class="col"><a style="white-space: pre-wrap;">@awarded.ProjectSubProjectTl.Description</a></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Remark</b></p></div>
                <div class="col"><a style="white-space: pre-wrap;">@awarded.ProjectSubProjectTl.Remark</a></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Budget</b></p></div>
                @if (string.IsNullOrEmpty(awarded.ProjectSubProjectTl.Budget.ToString()))
                {
                    <div class="col">@String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", 0)</div>
                }
                else
                {
                    <div class="col">@String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", awarded.ProjectSubProjectTl.Budget)</div>
                }
            </div>
            <div class="row">
                <div class="col-2"><p><b>Status</b></p></div>
                <div class="col">@awarded.ProjectSubProjectTl.ProjectSubStatus</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Started Date</b></p></div>
                @if (string.IsNullOrEmpty(awarded.ProjectSubProjectTl.PlanStartDate.ToString()))
                {
                    <div class="col">Not Planed</div>
                }
                else
                {
                    <div class="col">@awarded.ProjectSubProjectTl.PlanStartDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</div>
                }
            </div>
            <div class="row">
                <div class="col-2"><p><b>Finished Date</b></p></div>
                @if (string.IsNullOrEmpty(awarded.ProjectSubProjectTl.PlanFinishDate.ToString()))
                {
                    <div class="col">Not Planed</div>
                }
                else
                {
                    <div class="col">@awarded.ProjectSubProjectTl.PlanFinishDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</div>
                }
            </div>
        </div>
    </RadzenFieldset>
}
<br />

<RadzenFieldset Text="Member Assignment">
    @if (awarded.Id > 0)
    {
        <div class="container">
            <div class="row">
                <div class="col-2"><p><b>Company Name TH</b></p></div>
                <div class="col">@member.CompanyNameTh</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Company Name EN</b></p></div>
                <div class="col">@member.CompanyNameEn</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Telephone</b></p></div>
                <div class="col">@member.Telephone</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Email</b></p></div>
                <div class="col">@member.Email</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Website</b></p></div>
                <div class="col">@member.WebSite</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Facebook</b></p></div>
                <div class="col">@member.Facebook</div>
            </div>
        </div>
    }
</RadzenFieldset>
<br />


@if (awarded.Awarded == "Y")
{

}
else
{
    <RadzenFieldset Text="Is Awarded ?">
        <div class="container">
            <div class="row">
                <div class="col-1"><RadzenButton Click=@(args => UpdateAwarded()) Text="Yes" ButtonStyle="ButtonStyle.Success" /></div>
                &nbsp;
                <div class="col-1">
                    <RadzenButton Shade="Shade.Lighter" Click=@(args => GoBack()) Text="No" ButtonStyle="ButtonStyle.Light" /></div>
            </div>
        </div>
    </RadzenFieldset>
}
<br />


@code {
    [Parameter]
    public int id { get; set; }

    public ProjectSubMemberAsgmt awarded { get; set; } = new ProjectSubMemberAsgmt();
    public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
    public ProjectHd projecthd { get; set; } = new ProjectHd();
    public MemberMaster member { get; set; } = new MemberMaster();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }

    int userrole;
    string usermemberno;
    int userid;

    protected override async Task OnInitializedAsync()
    {
        awarded = await pj.GetMemberAssign(id);
        member = await pj.GetMemberByID(awarded.MemberId);
        GetDataAuthen();
        StateHasChanged();
    }

    async Task GetDataAuthen()
    {
        usermemberno = string.Empty;

        AuthenticationState authenticationState;
        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;
        var claim = this.AuthenticationStateUser.Claims.ToList();
        userrole = int.Parse(claim[1].Value);
        usermemberno = claim[2].Value;
        userid = int.Parse(claim[3].Value);
    }

    async void UpdateAwarded()
    {
        int hiscount = awarded.MemberAsgmtawardedHistories.Count;
        if (hiscount < 1)
        {
            awarded.Awarded = "Y";
            awarded.ProjectSubProjectTl.ProjectSubStatus = "Member Assignments Awarded";
            awarded.MemberAsgmtawardedHistories.Add(new MemberAsgmtawardedHistory() { MemberAssignmentId = awarded.MemberId, DateAwarded = DateTime.Now, Active = "Y", LastUpdated = DateTime.Now, EditorId = userid });
            awarded.ProjectSubProjectTl.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = awarded.ProjectSubProjectTlid, Remark = "Member Assignments Awarded", EditorId = userid });
            var result = await pj.SaveMemberAssign(awarded);

            NavManager.NavigateTo("/Data/MemberAssign/" + awarded.ProjectSubProjectTlid.ToString());
        }
    }

    async void UpdateProjectHD()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(awarded.ProjectSubProjectTlid);
        projecthd = await pj.GetProjectHDbyID(projectsub.ProjectHdid);
        int subcount = projecthd.ProjectSubProjectTls.Count;
        int award = 0;
        foreach (var list in projecthd.ProjectSubProjectTls)
        {
            if (list.ProjectSubStatus == "Member Assignments Awarded") award++;
        }

        if (subcount == award)
        {
            projecthd.ProjectHdhistories.Add(new ProjectHdhistory() { ProjectHdid = projecthd.Id, Remark = "Member Assignments Awarded", TimeStamp = DateTime.Now, EditorId = userid });
            projecthd.ProjectHdstatus = "Member Assignments Awarded";
            var result = await pj.SaveProjectHD(projecthd);
            NavManager.NavigateTo("/Data/MemberAssign/" + awarded.ProjectSubProjectTlid.ToString());
        }
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/Data/MemberAssign/" + awarded.ProjectSubProjectTlid.ToString());
    }

    public void Dispose()
    {
        Console.WriteLine("Disconnected");
    }
}
