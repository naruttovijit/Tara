@page "/Data/ProjectSubProgress/{id:int}"

@implements IDisposable;

@using Data;
@using ModelM2s;
@using ModelM4s;

@inject ProjectData pj;
@inject NavigationManager NavManager

<h3>Project Sub Update Progress</h3>
<EditForm Model="projectsub">
    <div class="container">
        <div class="row">
            <div class="col-2"><p><b>Sub Running Number :</b></p></div>
            <div class="col">@projectsub.ProjectSubRunNo</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Project Sub Name :</b></p></div>
            <div class="col">@projectsub.ProjectSubName</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Description :</b></p></div>
            <div class="col">@projectsub.Description</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Remarked :</b></p></div>
            <div class="col">@projectsub.Remark</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Budget :</b></p></div>
            @if (string.IsNullOrEmpty(projectsub.Budget.ToString()))
            {
                <div class="col">0 THB</div>
            }
            else
            {
                <div class="col">@projectsub.Budget THB</div>
            }
        </div>
        <div class="row">
            <div class="col-2"><p><b>Status :</b></p></div>
            <div class="col">@projectsub.ProjectSubStatus</div>
        </div>
        <div class="row">
            <div class="col-2"><p><b>Started Date :</b></p></div>
            @if (string.IsNullOrEmpty(projectsub.PlanStartDate.ToString()))
            {
                <div class="col">Not Planed</div>
            }
            else
            {
                <div class="col">@projectsub.PlanStartDate</div>
            }
        </div>
        <div class="row">
            <div class="col-2"><p><b>Finished Date :</b></p></div>
            @if (string.IsNullOrEmpty(projectsub.PlanFinishDate.ToString()))
            {
                <div class="col">Not Planed</div>
            }
            else
            {
                <div class="col">@projectsub.PlanFinishDate</div>
            }
        </div>
    </div>
    <br />

    <h4>Project Category</h4>
    <div class="container">
        <div class="row">
            @if (subcapability is null)
            {
                <div class="col"><p><em>No Capability</em></p></div>
            }
            else
            {
                <table class="table table-striped" style="background-color:white; border:solid">
                    <thead>
                        <tr>
                            <th>Capability Name</th>
                            <th>Capability Sub Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cat in subcapability)
                        {
                            var cate = capability.Where(w => w.Id == cat.CategoryCatId).FirstOrDefault();
                            <tr>
                                <td>@cate.CategoryCat</td>
                                <td>@cat.CategoryCatSub</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
    <br />

    <div class="container">
        <div class="row">
            @if (!show)
            {
                <div class="col-2"><p><b>Update Progress :</b></p></div>
                <div class="col-2">
                    <InputSelect @bind-Value="progress">
                        <option>Pre Sales</option>
                        <option>Proposal</option>
                        <option>Quoted</option>
                        <option>Negociated</option>
                        <option>Issued PO</option>
                        <option>Working</option>
                        <option>Finalizing</option>
                        <option>Wait-Payment</option>
                        <option>In-Warranty</option>
                        <option>On-Hold</option>
                        <option>Job Complete</option>
                        <option>Cancelled</option>
                    </InputSelect>
                </div>
                <div class="col-2"><button @onclick="UpdateProjectSub">Update Progress</button></div>
            }
           
        </div>
    </div>
    <br />

    <div class="container">
        <div class="row">
            <div class="col-2">
                <button type="submit" class="btn btn-primary" @onclick="()=>GoBack()">Project Sub</button>
            </div>
        </div>
    </div>
    <br />

</EditForm>


@code {
    [Parameter]
    public int id { get; set; }

    public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
    public ProjectRatypeTl projectra { get; set; } = new ProjectRatypeTl();
    public ProjectHd projecthd { get; set; } = new ProjectHd();

    private List<MasterCapabilityCatSub> subcapability;
    private List<MasterCapabilityCat> capability;

    string progress = string.Empty;
    bool show = false;

    protected override async Task OnInitializedAsync()
    {
        await Initial();
    }

    private async Task Initial()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        projectra = await pj.GetProjectRATypeBySubProjectID(projectsub.Id);
        capability = await pj.GetAllCapability();

        subcapability = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(projectra.MemberCapability);

        if (projectsub.ProjectSubStatus == "Job Complete" || projectsub.ProjectSubStatus == "Cancelled")
        {
            show = true;
        }
        StateHasChanged();
    }

    async void UpdateProjectSub()
    {
        if (projectsub.ProjectSubStatus != string.Empty)
        {
            projectsub.ProjectSubStatus = progress;
            projectsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = projectsub.Id, Remark = projectsub.ProjectSubStatus, EditorId = 1 });
            var result = await pj.SaveSubProject(projectsub);

            UpdateProjectHD();
            await Initial();
        }
    }

    async void UpdateProjectHD()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        projecthd = await pj.GetProjectHDbyID(projectsub.ProjectHdid);
        int subcount = projecthd.ProjectSubProjectTls.Count;
        int complete = 0;
        int cancel = 0;
        foreach (var list in projecthd.ProjectSubProjectTls)
        {
            if (list.ProjectSubStatus == "Job Complete") complete++;
            if (list.ProjectSubStatus == "Cancelled") cancel++;
        }

        if (subcount == complete + cancel)
        {
            string message = string.Empty;
            if (cancel > 0)
            {
                message = "Closed with Cancelled";
            }
            else
            {
                message = "Closed";
            }
            projecthd.ProjectHdhistories.Add(new ProjectHdhistory() { ProjectHdid = projecthd.Id, Remark = message, TimeStamp = DateTime.Now, EditorId = 1 });
            projecthd.ProjectHdstatus = message;
            var result = await pj.SaveProjectHD(projecthd);
        }
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/Data/ProjectSubDetail/" + projectsub.Id.ToString());
    }

    public void Dispose()
    {
        Console.WriteLine("Disconnected");
    }
}
