@page "/Data/ProjectSubEvent/{id:int}"

@implements IDisposable;

@using Data;
@using ModelM2s;
@using ModelM4s;
@using System.Globalization;
@using Radzen;
@using Radzen.Blazor;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@inject ProjectData pj;
@inject NavigationManager NavManager
@inject DialogService DialogService
@inject BlazorSpinner.SpinnerService spin

@attribute [Authorize(Roles = "1,2")]

<br />
<h3>Project Sub Event</h3>
<br />

<EditForm Model="projectsub">
    <ConcurrentComponent ModuleName="ProjectSubProgress" ObjId="projectsub.Id" UserId="userid"></ConcurrentComponent>
    <div class="card">
        <div class="card-header">Detail</div>
        <div class="card-body">
            <div class="row">
                <div class="col-2"><p><b>Sub Running Number</b></p></div>
                <div class="col">@projectsub.ProjectSubRunNo</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Project Sub Name</b></p></div>
                <div class="col">@projectsub.ProjectSubName</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Description</b></p></div>
                <div class="col"><a style="white-space: pre-wrap;">@projectsub.Description</a></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Remark</b></p></div>
                <div class="col"><a style="white-space: pre-wrap;">@projectsub.Remark</a></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Budget</b></p></div>
                @if (string.IsNullOrEmpty(projectsub.Budget.ToString()))
                {
                    <div class="col">@String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", 0)</div>
                }
                else
                {
                    <div class="col">@String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", projectsub.Budget)</div>
                }
            </div>
            <div class="row">
                <div class="col-2"><p><b>Status</b></p></div>
                <div class="col">@projectsub.ProjectSubStatus</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Started Date</b></p></div>
                @if (string.IsNullOrEmpty(projectsub.PlanStartDate.ToString()))
                {
                    <div class="col">Not Planed</div>
                }
                else
                {
                    <div class="col">@projectsub.PlanStartDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</div>
                }
            </div>
            <div class="row">
                <div class="col-2"><p><b>Finished Date</b></p></div>
                @if (string.IsNullOrEmpty(projectsub.PlanFinishDate.ToString()))
                {
                    <div class="col">Not Planed</div>
                }
                else
                {
                    <div class="col">@projectsub.PlanFinishDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</div>
                }
            </div>
        </div>
    </div>
    <br />

    <div class="card">
        <div class="card-header">Project Category</div>
        <div class="card-body">
            @if (subcapability is null || subcapability.Count == 0)
            {
                <div class="row"><p><em>No Capability</em></p></div>
            }
            else
            {
                @foreach (var cat in subcapability)
                {
                    var cate = capability.Where(w => w.Id == cat.CategoryCatId).FirstOrDefault();
                    <div class="row">
                        <div class="col"><li>@cate.CategoryCat - @cat.CategoryCatSub</li></div>
                    </div>
                }
            }
        </div>
    </div>
    <br />

    <div class="card">
        <div class="card-header">Event</div>
        <div class="card-body">
            <div class="row">
                <p>
                    <RadzenDataGrid PageSize="5" AllowPaging="true" AllowSorting="true" Data="@eve" TItem="Event" ColumnWidth="20%" GridLines="DataGridGridLines.Horizontal" class="border-0">
                        <Columns>
                            <RadzenDataGridColumn TItem="Event" Property="TargetDate" Title="Target Date" FormatString="{0:dd/MM/yyyy}" Width="15%" />
                            <RadzenDataGridColumn TItem="Event" Property="Description" Title="Description" Width="65%">
                                <Template Context="desc">
                                    <a style="white-space: pre-wrap;">@desc.Description</a>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Event" Property="Status" Title="Status" Width="20%" />
                        </Columns>
                    </RadzenDataGrid>
                </p>
            </div>
            <br />
            <div class="row">
                <div class="col-2"><p><b>Target Date</b></p></div>
                <div class="col-3">
                    <p>
                    <RadzenDatePicker @bind-Value=@target DateFormat="dd/MM/yyyy" Class="w-100">
                        <FooterTemplate>
                            <RadzenButton Click=@OnTodayDate Text="Today" Class="my-3 w-100" />
                        </FooterTemplate>
                    </RadzenDatePicker>
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Description</b></p></div>
                <div class="col"><p><RadzenTextArea style="width: 100%" @bind-Value="desc" Cols="30" Rows="5" /></p></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Progress</b></p></div>
                <div class="col-3">
                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@progress Placeholder="Select..."
                        Data=@listprog TextProperty="Name" ValueProperty="Name" Class="w-100" />
                </div>
            </div>
            <br />
            <div class="row-cols-sm-auto">
                <RadzenButton Click=@(args => UpdateProjectSub()) Text="Save" Icon="save" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" />
            </div>
        </div>
    </div>
    <br />
</EditForm>


@code {
    [Parameter]
    public int id { get; set; }

    public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
    public ProjectRatypeTl projectra { get; set; } = new ProjectRatypeTl();
    public ProjectHd projecthd { get; set; } = new ProjectHd();
    public Event eventcreate { get; set; } = new Event();

    private List<MasterCapabilityCatSub> subcapability;
    private List<MasterCapabilityCat> capability;
    private List<Progress> listprog;
    private List<Event> eve;

    string progress = string.Empty;
    bool show = false;
    string desc = string.Empty;
    DateTime target;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }

    int userrole;
    string usermemberno;
    int userid;

    protected override async Task OnInitializedAsync()
    {
        spin.Show();
        await base.OnInitializedAsync();
        await GetDataAuthen();
        await CreateListProgress();
        await Initial();
        StateHasChanged();
        spin.Hide();
    }

    async Task Initial()
    {
        desc = string.Empty;
        progress = string.Empty;
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        projectra = await pj.GetProjectRATypeBySubProjectID(projectsub.Id);
        capability = await pj.GetAllCapability();
        eve = await pj.GetEventbySubProjectID(projectsub.Id);
        subcapability = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(projectra.MemberCapability);
        if (projectsub.ProjectSubStatus == "Job Complete" || projectsub.ProjectSubStatus == "Cancelled")
        {
            show = true;
        }
        OnTodayDate();
        StateHasChanged();
    }

    async Task GetDataAuthen()
    {
        usermemberno = string.Empty;

        AuthenticationState authenticationState;
        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;
        var claim = this.AuthenticationStateUser.Claims.ToList();
        userrole = int.Parse(claim[1].Value);
        usermemberno = claim[2].Value;
        userid = int.Parse(claim[3].Value);
    }

    async void UpdateProjectSub()
    {
        if (string.IsNullOrEmpty(desc))
        {
            await ErrorMessage("Description cannot Empty !");
            return;
        }
        if (string.IsNullOrEmpty(progress))
        {
            await ErrorMessage("Please select Progress");
            return;
        }

        eventcreate.ProjectSubProjectTlid = projectsub.Id;
        eventcreate.TargetDate = target;
        eventcreate.Description = desc.Replace("\r\n", "" + ((char)13).ToString() + (char)10).ToString();
        eventcreate.Status = progress;
        eventcreate.Active = "Y";
        eventcreate.EditorId = userid;
        var result1 = await pj.SaveEvent(eventcreate);
        eventcreate = new Event();
 
        projectsub.ProjectSubStatus = progress;
        projectsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = projectsub.Id, Remark = projectsub.ProjectSubStatus, EditorId = userid });
        var result2 = await pj.SaveSubProject(projectsub);
        UpdateProjectHD();
        await Initial();
    }

    async Task CreateListProgress()
    {
        listprog = new List<Progress>
        {
            new Progress {Name = "Pre Sales"},
            new Progress {Name = "Proposal"},
            new Progress {Name = "Quoted"},
            new Progress {Name = "Negociated"},
            new Progress {Name = "Issued PO"},
            new Progress {Name = "Working"},
            new Progress {Name = "Finalizing"},
            new Progress {Name = "Wait-Payment"},
            new Progress {Name = "In-Warranty"},
            new Progress {Name = "On-Hold"},
            new Progress {Name = "Job Complete"},
            new Progress {Name = "Cancelled"}
        };
    }

    async void UpdateProjectHD()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        projecthd = await pj.GetProjectHDbyID(projectsub.ProjectHdid);
        int subcount = projecthd.ProjectSubProjectTls.Count;
        int complete = 0;
        int cancel = 0;
        foreach (var list in projecthd.ProjectSubProjectTls)
        {
            if (list.ProjectSubStatus == "Job Complete") complete++;
            if (list.ProjectSubStatus == "Cancelled") cancel++;
        }

        if (subcount == complete + cancel)
        {
            string message = string.Empty;
            if (complete == 0 && cancel > 0)
            {
                message = "Cancelled";
            }
            else if (complete > 0 && cancel > 0)
            {
                message = "Completed with Cancelled";
            }
            else
            {
                message = "Completed";
            }
            projecthd.ProjectHdhistories.Add(new ProjectHdhistory() { ProjectHdid = projecthd.Id, Remark = message, TimeStamp = DateTime.Now, EditorId = userid });
            projecthd.ProjectHdstatus = message;
            var result = await pj.SaveProjectHD(projecthd);
        }
    }

    void OnTodayDate()
    {
        target = DateTime.Now;
    }

    async Task ErrorMessage(string message)
    {
        await DialogService.OpenAsync("Warning", ds =>
    @<div>
        @message
    </div>
        , new DialogOptions() { CloseDialogOnOverlayClick = true });
    }

    private void GoMain()
    {
        NavManager.NavigateTo("/Data/Project");
    }

    private void GoProject()
    {
        NavManager.NavigateTo("/Data/ProjectDetail/" + projectsub.ProjectHdid.ToString());
    }

    private void GoSub()
    {
        NavManager.NavigateTo("/Data/ProjectSubDetail/" + projectsub.Id.ToString());
    }

    public void Dispose()
    {
        if (subcapability is not null) subcapability.Clear();
        if (capability is not null) capability.Clear();
        if (listprog is not null) listprog.Clear();
        if (eve is not null) eve.Clear();
        Console.WriteLine("Disconnected");
    }
}
