@page "/Data/ProjectSubProgress/{id:int}"

@implements IDisposable;

@using Data;
@using ModelM2s;
@using ModelM4s;
@using System.Globalization;
@using Radzen;
@using Radzen.Blazor;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@inject ProjectData pj;
@inject NavigationManager NavManager

@attribute [Authorize(Roles = "1,2")]

<br />
<h3>Project Sub Update Progress</h3>
<br />


<EditForm Model="projectsub">
    <ConcurrentComponent ModuleName="ProjectSubProgress" ObjId="projectsub.Id" UserId="userid"></ConcurrentComponent>
    <RadzenFieldset Text="Detail">
        <div class="container">
            <div class="row">
                <div class="col-2"><p><b>Sub Running Number</b></p></div>
                <div class="col">@projectsub.ProjectSubRunNo</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Project Sub Name</b></p></div>
                <div class="col">@projectsub.ProjectSubName</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Description</b></p></div>
                <div class="col"><a style="white-space: pre-wrap;">@projectsub.Description</a></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Remark</b></p></div>
                <div class="col"><a style="white-space: pre-wrap;">@projectsub.Remark</a></div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Budget</b></p></div>
                @if (string.IsNullOrEmpty(projectsub.Budget.ToString()))
                {
                    <div class="col">@String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", 0)</div>
                }
                else
                {
                    <div class="col">@String.Format(new System.Globalization.CultureInfo("th-TH"), "{0:C}", projectsub.Budget)</div>
                }
            </div>
            <div class="row">
                <div class="col-2"><p><b>Status</b></p></div>
                <div class="col">@projectsub.ProjectSubStatus</div>
            </div>
            <div class="row">
                <div class="col-2"><p><b>Started Date</b></p></div>
                @if (string.IsNullOrEmpty(projectsub.PlanStartDate.ToString()))
                {
                    <div class="col">Not Planed</div>
                }
                else
                {
                    <div class="col">@projectsub.PlanStartDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</div>
                }
            </div>
            <div class="row">
                <div class="col-2"><p><b>Finished Date</b></p></div>
                @if (string.IsNullOrEmpty(projectsub.PlanFinishDate.ToString()))
                {
                    <div class="col">Not Planed</div>
                }
                else
                {
                    <div class="col">@projectsub.PlanFinishDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</div>
                }
            </div>
        </div>
    </RadzenFieldset>
    <br />

    <RadzenFieldset Text="Project Category">
        <div class="container">
            <div class="row">
                @if (subcapability is null)
                {
                    <div class="col"><p><em>No Capability</em></p></div>
                }
                else
                {
                    @foreach (var cat in subcapability)
                    {
                        var cate = capability.Where(w => w.Id == cat.CategoryCatId).FirstOrDefault();
                        <div class="row">
                            <div class="col">@cate.CategoryCat</div>
                            <div class="col">@cat.CategoryCatSub</div>
                        </div>
                    }
                }
            </div>
        </div>
    </RadzenFieldset>
    <br />

    <RadzenFieldset Text="Progress">
        <div class="container">
            <div class="row">
                @if (!show)
                {
                    <div class="col-2"><p><b>Update Progress :</b></p></div>
                    <div class="col-2">
                        <InputSelect @bind-Value="progress">
                            <option>Pre Sales</option>
                            <option>Proposal</option>
                            <option>Quoted</option>
                            <option>Negociated</option>
                            <option>Issued PO</option>
                            <option>Working</option>
                            <option>Finalizing</option>
                            <option>Wait-Payment</option>
                            <option>In-Warranty</option>
                            <option>On-Hold</option>
                            <option>Job Complete</option>
                            <option>Cancelled</option>
                        </InputSelect>
                    </div>
                    <div class="col-2"><RadzenButton Click=@(args => UpdateProjectSub()) Text="Update Progress" ButtonStyle="ButtonStyle.Success" /></div>
                }

            </div>
        </div>
    </RadzenFieldset>
    <br />
</EditForm>


@code {
    [Parameter]
    public int id { get; set; }

    public ProjectSubProjectTl projectsub { get; set; } = new ProjectSubProjectTl();
    public ProjectRatypeTl projectra { get; set; } = new ProjectRatypeTl();
    public ProjectHd projecthd { get; set; } = new ProjectHd();

    private List<MasterCapabilityCatSub> subcapability;
    private List<MasterCapabilityCat> capability;

    string progress = string.Empty;
    bool show = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }

    int userrole;
    string usermemberno;
    int userid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetDataAuthen();
        await Initial();
    }

    async Task Initial()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        projectra = await pj.GetProjectRATypeBySubProjectID(projectsub.Id);
        capability = await pj.GetAllCapability();
        subcapability = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MasterCapabilityCatSub>>(projectra.MemberCapability);
        if (projectsub.ProjectSubStatus == "Job Complete" || projectsub.ProjectSubStatus == "Cancelled")
        {
            show = true;
        }
        StateHasChanged();
    }

    async Task GetDataAuthen()
    {
        usermemberno = string.Empty;

        AuthenticationState authenticationState;
        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;
        var claim = this.AuthenticationStateUser.Claims.ToList();
        userrole = int.Parse(claim[1].Value);
        usermemberno = claim[2].Value;
        userid = int.Parse(claim[3].Value);
    }

    async void UpdateProjectSub()
    {
        if (projectsub.ProjectSubStatus != string.Empty)
        {
            projectsub.ProjectSubStatus = progress;
            projectsub.ProjectSubProjectTlhistories.Add(new ProjectSubProjectTlhistory() { ProjectSubProjectTlid = projectsub.Id, Remark = projectsub.ProjectSubStatus, EditorId = userid });
            var result = await pj.SaveSubProject(projectsub);
            UpdateProjectHD();
            await Initial();
        }
    }

    async void UpdateProjectHD()
    {
        projectsub = await pj.GetProjectSubProjectTLbyID(id);
        projecthd = await pj.GetProjectHDbyID(projectsub.ProjectHdid);
        int subcount = projecthd.ProjectSubProjectTls.Count;
        int complete = 0;
        int cancel = 0;
        foreach (var list in projecthd.ProjectSubProjectTls)
        {
            if (list.ProjectSubStatus == "Job Complete") complete++;
            if (list.ProjectSubStatus == "Cancelled") cancel++;
        }

        if (subcount == complete + cancel)
        {
            string message = string.Empty;
            if (cancel > 0)
            {
                message = "Closed with Cancelled";
            }
            else
            {
                message = "Closed";
            }
            projecthd.ProjectHdhistories.Add(new ProjectHdhistory() { ProjectHdid = projecthd.Id, Remark = message, TimeStamp = DateTime.Now, EditorId = userid });
            projecthd.ProjectHdstatus = message;
            var result = await pj.SaveProjectHD(projecthd);
        }
    }

    private void GoMain()
    {
        NavManager.NavigateTo("/Data/Project");
    }

    private void GoProject()
    {
        NavManager.NavigateTo("/Data/ProjectDetail/" + projectsub.ProjectHdid.ToString());
    }

    private void GoSub()
    {
        NavManager.NavigateTo("/Data/ProjectSubDetail/" + projectsub.Id.ToString());
    }

    public void Dispose()
    {
        if (subcapability is not null) subcapability.Clear();
        if (capability is not null) capability.Clear();
        Console.WriteLine("Disconnected");
    }
}
