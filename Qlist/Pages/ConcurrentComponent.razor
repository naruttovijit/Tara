@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation


@if(!IsAvailable){

    <div style="
  color: red;
  font-size: 12px;
  padding: 5px;
  font-weight: bold;
  border: 1px solid black;
  background-color: pink;">@messages</div>
}
@code {

    [Parameter]
    public string ModuleName { get; set; }
    [Parameter]
    public int ObjId { get; set; }
    [Parameter]
    public string UserId { get; set; }

    private HubConnection? hubConnection;
    private string messages;

    bool IsAvailable = true;
    string ip = "http://apim2.theworkpc.com/";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(ip + "concurrenthub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<bool, string>("returnmsg", (isavailable, message) =>
        {
            IsAvailable = isavailable;
            if(!isavailable){
                messages = message;
            }

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Send();
        }

    }
    bool checkopen = true;
    private async Task Send()
    {

        if (hubConnection is not null)
            {
                await hubConnection.SendAsync("RecieveMessage",ModuleName,ObjId,UserId);
            }

    }



    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RemoveObject",ModuleName,ObjId,UserId);
            await hubConnection.DisposeAsync();
        }
    }
}

